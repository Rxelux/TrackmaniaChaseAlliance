//#RequireContext CSmMode
#Extends "ChaseAlliance/Libs/ModeBase/GameLoop.Script.txt"
#Const CompatibleMapTypes "TrackMania\\TM_Race"

#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/Env.Script.txt" as Env
#Include "ChaseAlliance/Libs/Common/Commands.Script.txt" as Commands
#Include "ChaseAlliance/Libs/Common/Users.Script.txt" as UsersL
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/Common/Messages.Script.txt" as Messages
#Include "ChaseAlliance/Libs/Common/Spawn.Script.txt" as Spawn
#Include "ChaseAlliance/Libs/Common/EndTime.Script.txt" as EndTimeL
#Include "ChaseAlliance/Libs/Common/FakeUserController.Script.txt" as Controller
#Include "ChaseAlliance/Libs/Common/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/ChaseAlliance/HttpRequests.Script.txt" as HttpRequests
#Include "ChaseAlliance/Libs/ChaseAlliance/Players.Script.txt" as PlayersL
#Include "ChaseAlliance/Libs/ChaseAlliance/Ranked.Script.txt" as Ranked
#Include "ChaseAlliance/Libs/ChaseAlliance/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/ChaseTeams.Script.txt" as ChaseTeams
#Include "ChaseAlliance/Libs/ChaseAlliance/Markers.Script.txt" as MarkersL
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/PauseUI.Script.txt" as PauseUI
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/MainUI.Script.txt" as MainUI
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/ScoresTableUI.Script.txt" as ScoresTableUI
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/MarkersUI.Script.txt" as MarkersUI
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/GameStates.Script.txt" as GameStates

#Include "TextLib" as TL
#Include "TimeLib" as TiL

#Setting S_EndRoundPause 15000 as "Pause in ms after a round"
#Setting S_EndMapPause 20000 as "Pause in ms after a map"
#Setting S_EndMatchPause 25000 as "Pause in ms after a match"

#Setting S_MapIntroDuration 8000 as "Map intro duration in ms"
#Setting S_WarmUpDuration 30000 as "Warm-up duration in ms"

#Setting S_RelayerCount 3 as "[2,3] Number of players that do relays per team"
#Setting S_RelayGap 3 as "[3+] Number of failed relay a team can fall behind before getting eliminated"
#Setting S_RelaySortDelay 250 as "[50,500] Events sort lifetime"
#Setting S_MapCount 3 as "[1+] Number of maps to win a match"
#Setting S_RoundCount 3 as "[1+] Number of round to win a map"
#Setting S_LapCount 5 as "[1+] Number of laps to win a round"
#Setting S_Team1Name "" as "Team 1 Name"
#Setting S_Team2Name "" as "Team 2 Name"
#Setting S_Team1Color "" as "Team 1 Color"
#Setting S_Team2Color "" as "Team 2 Color"

#Setting S_HttpApiURL "" as "Secret API URL"
#Setting S_RankedMode -1 as "Enable ranked mode (1 = true, 0 = false, -1 = no api url, no ui)"
#Setting S_Env 0 as "0 = prod, 1 = test, 2 = dev"


***StartServer***
***
Log("StartServer");
GameState::Load();
GameState::Add(GameStates::C_PlayingName);
GameState::Add(GameStates::C_WaitingName);
GameState::Add(GameStates::C_WarmUpName);
GameState::Add(GameStates::C_PauseName);
GameState::Add(GameStates::C_EndRoundName);
GameState::Add(GameStates::C_IntroName);
GameState::Add(GameStates::C_OutroName);
GameState::Add(GameStates::C_PodiumName);
HttpRequests::Load();
HttpRequests::Init(S_HttpApiURL);
Ranked::Load();
Settings::Load();
Commands::Load();
UsersL::Load();
Events::Load();
Messages::Load();
Spawn::Load();
Controller::Load();
PlayersL::Load();
MarkersL::Load();
ChaseTeams::Load();
PauseUI::Load();
MainUI::Load();
ScoresTableUI::Load();
MarkersUI::Load();
Commands::AddPermittedUser("pTuyJG9STcCN_11BiU3t0Q");
Commands::AddPermittedUser("V_vWwMxbQqO0GgDYtK3zTg");
Commands::AddPermittedUser("oNhUUAthQx6SkVe2YK9PXw");
Env::SetEnv(S_Env);
***

***StartScript***
***
Log("StartScript");
***

***StartMatch***
***
Log("StartMatch");
ChaseTeams::ResetTeamsMapPoint();
ChaseTeams::ToNet();
***

***StartMatchRanked***
***
Log("StartMatchRanked");
ChaseTeams::ResetTeamsMapPoint();
ChaseTeams::ToNet();
***

***BeforeLoadMap***
***
Log("BeforeLoadMap");
***

***AfterLoadMap***
***
Log("AfterLoadMap");
Spawn::Find();
GameState::Set(GameStates::C_Intro);
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
Sleep(S_MapIntroDuration);
***

***StartMap***
***
Log("StartMap");
ChaseTeams::ResetTeamsRoundPoint();
ChaseTeams::ToNet();
if(!GameState::Is(GameStates::C_Pause)){
	GameState::Set(GameStates::C_WarmUp);
}
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Manual;
***

***StartRound***
***
Log("StartRound");
//ValidateSettings
HttpRequests::Init(S_HttpApiURL);
Env::SetEnv(S_Env);
if (!_RankedModeOngoing){
	Settings::SetRelayerCount(S_RelayerCount);
}
Settings::SetRelayGap(S_RelayGap);
Settings::SetRelaySortDelay(S_RelaySortDelay);
Settings::SetMapCount(S_MapCount);
Settings::SetRoundCount(S_RoundCount);
Settings::SetLapCount(S_LapCount);
if (!_RankedModeOngoing){
	Settings::SetRankedMode(S_RankedMode);
}
Settings::ToNet();
ChaseTeams::ResetTeamsRelay();
ChaseTeams::SetTeamsNamesAndColors(S_Team1Name,S_Team1Color,S_Team2Name,S_Team2Color);
ChaseTeams::ToNet();
if(GameState::Is(GameStates::C_WarmUp)){
	Messages::SendStatus(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_WarmUp)^"Warm-Up",0, CUIConfig::EUISound::Warning);
	EndTime = Now + S_WarmUpDuration;
	EndTimeL::SetEndTime(S_WarmUpDuration);
}
if(GameState::Is(GameStates::C_Pause)){
	Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_Pause)^"Pause",0,CUIConfig::EUISound::EndRound);
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

StartTime = Now + 1500;
PlayersL::SpawnAll(StartTime);
MarkersL::RefreshMarkers();

//idk just in case 
UsePvPCollisions = False;
UsePvECollisions = False;
***

***PlayLoop***
***
if (Settings::GetRankedMode() == 0 && Ranked::TeamsAreConsistant() && Ranked::TeamsAreReady()){
	Log("Ranked Mode Started!");
	Settings::SetRankedMode(1);
	_RankedModeHasStarted = True;
	Settings::SetRelayerCount(Ranked::RankedPlayerCount()/2);
	Settings::ToNet();
	StopMatch();
}
if(GameState::Is(GameStates::C_Playing)){
	if(ChaseTeams::GetWinState() >= 0){
		Log("Round Stopped, Team reached win state!");
		StopRound();
	}
}
if(GameState::Is(GameStates::C_Waiting)){
	if(ChaseTeams::AreComplete()){
		Log("Round Stopped, Team are ready!");
		StopRound();
	}
}
if(!GameState::Is(GameStates::C_Playing)){
	foreach(Player in Players){
		if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned){
			PlayersL::Spawn(Player,Now+1500);
		}
	}
}
if(GameState::Is(GameStates::C_WarmUp) && Now > EndTime){
	Log("Warm-up stopped, Warm-up time reached!");
	if(ChaseTeams::AreComplete()){
		GameState::Set(GameStates::C_Playing);
		Messages::SendStatus(UIManager.UIAll,"Starting Round!",S_EndRoundPause,CUIConfig::EUISound::Warning);
	}
	StopRound();
}
***

***PlayLoopRanked***
***
if(GameState::Is(GameStates::C_Playing)){
	if(!Ranked::TeamsAreConsistant()){
		Log("Round Stopped, ranked teams are not as it began with");
		GameState::Set(GameStates::C_Waiting);
		StopRound();
	}
	if(ChaseTeams::GetWinState() >= 0){
		Log("Round Stopped, Team reached win state!");
		StopRound();
	}
}
if(GameState::Is(GameStates::C_Waiting)){
	if(ChaseTeams::AreComplete() && Ranked::TeamsAreConsistant() && Ranked::TeamsAreReady()){
		Log("Round Stopped, Ranked Teams are ready!");
		StopRound();
	}
}
if(!GameState::Is(GameStates::C_Playing)){
	foreach(Player in Players){
		if(Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned){
			PlayersL::Spawn(Player,Now+1500);
		}
	}
}
if(GameState::Is(GameStates::C_WarmUp) && Now > EndTime){
	Log("Warm-up stopped, Warm-up time reached!");
	if(ChaseTeams::AreComplete() && Ranked::TeamsAreConsistant() && Ranked::TeamsAreReady()){
		Settings::SetRelayerCount(Ranked::RankedPlayerCount()/2);
		GameState::Set(GameStates::C_Playing);
		Messages::SendStatus(UIManager.UIAll,"Starting Round!",S_EndRoundPause,CUIConfig::EUISound::Warning);
	}
	StopRound();
}
***

***EndRound***
***
Log("EndRound");
Messages::ClearAll();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
declare Integer WinningClan = ChaseTeams::GetWinClan();
if(WinningClan > 0){
	ChaseTeams::IncrementTeamRoundPoint(WinningClan);
	Messages::SendStatus(UIManager.UIAll,ChaseTeams::GetWinStateString(),S_EndRoundPause,CUIConfig::EUISound::Warning);
	Log(Teams[WinningClan-1].Name^" wins the round: "^ChaseTeams::GetWinStateString(),True);
	Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Teams[WinningClan-1].ColorUI)^Teams[WinningClan-1].Name^" wins the round." ,S_EndRoundPause,CUIConfig::EUISound::VictoryPoint );
	if(ChaseTeams::GetTeamRoundPoint(WinningClan) >= Settings::GetRoundCount()){
		ChaseTeams::IncrementTeamMapPoint(WinningClan);
		StopMap();
	}
	ChaseTeams::ToNet();
	Log(Teams[0].Name^": Rounds "^ChaseTeams::GetTeamRoundPoint(1)^"/"^Settings::GetRoundCount()^"\t"^Teams[1].Name^": Rounds "^ChaseTeams::GetTeamRoundPoint(2)^"/"^Settings::GetRoundCount(),True);
}

if(GameState::Is(GameStates::C_Waiting) && ChaseTeams::AreComplete()){
	Messages::SendStatus(UIManager.UIAll,"Starting Round!",S_EndRoundPause,CUIConfig::EUISound::Warning);
}
GameState::Set(GameStates::C_EndRound);
EndTimeL::SetEndTime(S_EndRoundPause);
Sleep(S_EndRoundPause);
if(GameState::IsPrev(GameStates::C_Pause)){
	GameState::Set(GameStates::C_Pause);
}
else if(ChaseTeams::AreComplete()){
	GameState::Set(GameStates::C_Playing);
}else{
	Messages::SendStatus(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_Waiting)^"Waiting for players",0, CUIConfig::EUISound::Warning);
	GameState::Set(GameStates::C_Waiting);
}
***

***EndMap***
***
Log("EndMap");
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
declare Integer WinningClan = ChaseTeams::GetWinClan();
if(WinningClan > 0){
	Log(Teams[WinningClan-1].Name^" wins the map.",True);
	Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Teams[WinningClan-1].ColorUI)^Teams[WinningClan-1].Name^" wins the map." ,S_EndMapPause,CUIConfig::EUISound::EndRound);
	if(ChaseTeams::GetTeamMapPoint(WinningClan) >= Settings::GetMapCount()){
		StopMatch();
		Log(Teams[0].Name^": Maps "^ChaseTeams::GetTeamMapPoint(1)^"/"^Settings::GetMapCount()^"\t"^Teams[1].Name^": Maps "^ChaseTeams::GetTeamMapPoint(2)^"/"^Settings::GetMapCount(),True);
	}
}

GameState::Set(GameStates::C_Outro);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
Sleep(S_EndMapPause);
***
	
***EndMatch***
***
Log("EndMatch");
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
declare Integer WinningClan = ChaseTeams::GetWinClan();
if(WinningClan > 0){
	Log(Teams[WinningClan-1].Name^" wins the match.",True);
	Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Teams[WinningClan-1].ColorUI)^Teams[WinningClan-1].Name^" wins the match." ,S_EndMatchPause,CUIConfig::EUISound::EndMatch);
}
GameState::Set(GameStates::C_Podium);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Manual;
Sleep(S_EndMatchPause);
***

***EndMatchRanked***
***
declare Integer WinningClan = ChaseTeams::GetWinClan();
if(WinningClan > 0){
	Log(Teams[WinningClan-1].Name^" wins the match.",True);
	Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Teams[WinningClan-1].ColorUI)^Teams[WinningClan-1].Name^" wins the match." ,S_EndMatchPause,CUIConfig::EUISound::EndMatch);
}
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
if (_RankedModeHasStarted){
	Log("EndMatchPrepareRanked");
	Settings::SetRankedMode(1);
	_RankedModeHasStarted = False;
	_RankedModeOngoing = True;
}else if (_RankedModeOngoing){
	Log("EndMatchRanked");
	declare Text CurrentTime = TiL::GetCurrent();

	declare Text PlayersPointsChange = HttpRequests::PostRankedResults(S_HttpApiURL, CurrentTime, Ranked::GetTeam(WinningClan).PlayersLogin, Ranked::GetTeam(WinningClan).PlayersName, Ranked::GetOpposingTeam(WinningClan).PlayersLogin, Ranked::GetOpposingTeam(WinningClan).PlayersName);
	// declare Text PlayersPointsChange = HttpRequests::GetRankedPointsChange(S_HttpApiURL, Ranked::GetTeam(WinningClan),Ranked::GetOpposingTeam(WinningClan));
	UIManager.UIAll.SendChat("Ranked game finished, Final Results :"^PlayersPointsChange);
	Settings::SetRankedMode(S_RankedMode);
	Settings::SetRelayerCount(S_RelayerCount);
	Ranked::_ClearAll();
	_RankedModeOngoing = False;
}
GameState::Set(GameStates::C_Podium);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Manual;
Sleep(S_EndMatchPause);
***

***BeforeUnloadMap***
***
Log("BeforeUnloadMap");
***

***AfterUnloadMap***
***
Log("AfterUnloadMap");
***

***EndScript***
***
Log("EndScript");
***

***AfterYield***
***
foreach (Event in UIManager.PendingEvents) {
	Commands::PassUIEvent(Event);
	Controller::PassUIEvent(Event);
	PlayersL::PassUIEvent(Event);
	Ranked::PassUIEvent(Event);
}
foreach (Event in PendingEvents){
	Commands::PassModeEvent(Event);
	ChaseTeams::PassModeEvent(Event);
	PlayersL::PassModeEvent(Event);
	MarkersL::PassModeEvent(Event);
	HttpRequests::PassModeEvent(Event, S_HttpApiURL);
	Yield();
}
foreach (EventTime => Events in Events::GetPendingSorted()) {
	ChaseTeams::PassLibSortedEvent(EventTime,Events);
}
foreach (Event in Events::GetPending()) {
	UsersL::PassLibEvent(Event);
	Controller::PassLibEvent(Event);
	Settings::PassLibEvent(Event);
	ChaseTeams::PassLibEvent(Event);
	if(Event.Source == Commands::C_EventSource){
		switch (Event.Name) {
			case "Pause" : {
				if(GameState::Is(GameStates::C_Pause)){
					Log("Match resume!",True);
					GameState::Set(GameStates::C_Waiting);
					Messages::SendStatus(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_Waiting)^"Waiting for players",0, CUIConfig::EUISound::Warning);
				}else{
					Log("Match is Paused!",True);
					GameState::Set(GameStates::C_Pause);
					Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_Pause)^"Pause",0,CUIConfig::EUISound::EndRound);
					StopRound();
				}
			}
			case "EndRound": {
				StopRound();
			}
			case "EndMatch": {
				StopMatch();
			}
			case "EndMap": {
				StopMap();
			}
		}
	}
}
foreach (XmlRpcEvent in XmlRpc.PendingEvents) {
	switch (XmlRpcEvent.Type) {
		case CXmlRpcEvent::EType::CallbackArray: {
			switch (XmlRpcEvent.ParamArray1) {
				case "Trackmania.ForceEndRound": {
					StopRound();
				}
				case "Trackmania.WarmUp.ForceStopRound": {
					if(GameState::Is(GameStates::C_WarmUp)){
						StopRound();
					}
				}
				case "Trackmania.WarmUp.ForceStop": {
					if(GameState::Is(GameStates::C_WarmUp)){
						StopRound();
					}
				}
				case "Maniaplanet.Pause.SetActive": {
					if(GameState::Is(GameStates::C_Pause)){
						Log("Match resume!",True);
						GameState::Set(GameStates::C_Waiting);
						Messages::SendStatus(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_Waiting)^"Waiting for players",0, CUIConfig::EUISound::Warning);
					}else{
						Log("Match is Paused!",True);
						GameState::Set(GameStates::C_Pause);
						Messages::SendBig(UIManager.UIAll,"$"^TL::ColorToText(Colors::C_Pause)^"Pause",0,CUIConfig::EUISound::EndRound);
						StopRound();
					}
				}
			}
		}
	}
}
Controller::Yield();
Messages::Yield();
ChaseTeams::Yield();
***


