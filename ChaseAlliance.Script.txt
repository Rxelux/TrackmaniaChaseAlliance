//#RequireContext CSmMode
#Extends "ChaseAlliance/Libs/ModeBase/GameLoop.Script.txt"
#Const CompatibleMapTypes "TrackMania\\TM_Race"

#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/Env.Script.txt" as Env
#Include "ChaseAlliance/Libs/Common/Commands.Script.txt" as Commands
#Include "ChaseAlliance/Libs/Common/Users.Script.txt" as UsersL
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/Common/Messages.Script.txt" as Messages
#Include "ChaseAlliance/Libs/Common/Spawn.Script.txt" as Spawn
#Include "ChaseAlliance/Libs/Common/FakeUserController.Script.txt" as Controller
#Include "ChaseAlliance/Libs/ChaseAlliance/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/ChaseAlliance/Players.Script.txt" as PlayersL
#Include "ChaseAlliance/Libs/ChaseAlliance/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/ChaseTeams.Script.txt" as ChaseTeams
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/QuitMenu.Script.txt" as QuitMenu
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/MainUI.Script.txt" as MainUI
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Markers.Script.txt" as Markers

#Setting S_MapIntroPause 3000 as "Pause in ms for the map intro"
#Setting S_EndRoundPause 3000 as "Pause in ms after a round"
#Setting S_EndMatchPause 3000 as "Pause in ms after a match"

#Setting S_LapCount 5 as "Number of laps"
#Setting S_RelayerCount 3 as "Number of players that do relays per team"
#Setting S_RelayGap 3 as "Number of failed relay a team can fall behind before getting eliminated"
#Setting S_RelaySortDelay 250 as "Cache duration in ms in order for checkpoint events to be sortd in order"

***StartServer***
***
Log("StartServer");
Env::ToDev();
Commands::Load();
UsersL::Load();
Events::Load();
Messages::Load();
Spawn::Load();
Controller::Load();
GameState::Load();
PlayersL::Load();
Settings::Load();
ChaseTeams::Load();
QuitMenu::Load();
MainUI::Load();
Markers::Load();
Commands::AddPermittedUser("pTuyJG9STcCN_11BiU3t0Q");
Commands::AddPermittedUser("V_vWwMxbQqO0GgDYtK3zTg");
***

***StartScript***
***
Log("StartScript");
Settings::ApplySettings();
***

***StartMatch***
***
Log("StartMatch");
ChaseTeams::ResetChaseTeams();
***

***BeforeLoadMap***
***
Log("BeforeLoadMap");
***

***AfterLoadMap***
***
Log("AfterLoadMap");
Spawn::Find();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
NextYieldSleepMs = S_MapIntroPause;
---Yield---
***

***StartMap***
***
Log("StartMap");
ChaseTeams::ResetTeamsRoundPoint();
***

***StartRound***
***
Log("StartRound");
//ValidateSettings
Settings::SetLapCount(S_LapCount);
Settings::SetRelayerCount(S_RelayerCount);
Settings::SetRelayGap(S_RelayGap);
Settings::SetRelaySortDelay(S_RelaySortDelay);
ChaseTeams::ResetTeamsRelay();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;

StartTime = Now + 1500;
PlayersL::SpawnAll(StartTime);
// Markers::AttachMarkers();

if(ChaseTeams::AreComplete()){
	GameState::SetPlaying();
}else{
	GameState::SetWaiting();
}
Warn(GameState::GetStateText());
// UIManager.UIAll.QueueMessage(3000, 1, CUIConfig::EMessageDisplay::Big, "test");
// EndTime = Now + 3000;


***

***PlayLoop***
***
if(GameState::IsPlaying()){
	ChaseTeams::PlayLoop();
}
if(GameState::IsWaiting()){
	PlayersL::PlayLoop();
	if(ChaseTeams::AreComplete()){
		GameLoop::EndRound();
	}
}
***

***EndRound***
***
Log("EndRound");
UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
NextYieldSleepMs = S_EndRoundPause;
---Yield---

if(!GameLoop::MatchIsRunning()){
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
	NextYieldSleepMs = S_EndMatchPause;
	---Yield---
}
***

***EndMap***
***
Log("EndMap");
***
	
***BeforeUnloadMap***
***
Log("BeforeUnloadMap");
***

***AfterUnloadMap***
***
Log("AfterUnloadMap");
***

***EndMatch***
***
Log("EndMatch");
***

***EndScript***
***
Log("EndScript");
***

***BeforeYield***
***
foreach (Event in UIManager.PendingEvents) {
	Commands::PassUIEvent(Event);
	Controller::PassUIEvent(Event);
}
foreach (Event in PendingEvents){
	Commands::PassModeEvent(Event);
	ChaseTeams::PassModeEvent(Event);
	PlayersL::PassModeEvent(Event);
}
foreach (Event in Events::GetPending()) {
	GameLoop::PassLibEvent(Event);
	UsersL::PassLibEvent(Event);
	Controller::PassLibEvent(Event);
	GameState::PassLibEvent(Event);
}
Events::Yield();
Controller::Yield();
Messages::Yield();
***

Void NOOP(){}