// #RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "TextLib" as TL

#Struct K_Component {
	Text Name;
	Text Model;
	Text Directives;
	Text Variables;
	Text Functions;
	Text Labels;
	Text[] Dependencies;
}

declare K_Component[Text] G_Components;

Void CreateComponent(Text _Name,Text[] _Dependencies,Text _Model,Text _Directives,Text _Variables,Text _Functions, Text _Labels){
	assert(!G_Components.existskey(_Name),"""[CreateComponent] A Component with name {{{_Name}}} Already exists""");

	foreach (Dep in _Dependencies) {
		assert(G_Components.existskey(Dep),"""[CreateComponent] Component {{{_Name}}} Has {{{Dep}}} as a dependency but this component has not been created""");
	}
	
	G_Components[_Name] = K_Component{
		Name = _Name,
		Model = _Model,
		Directives = _Directives,
		Variables = _Variables,
		Functions = _Functions,
		Labels = _Labels,
		Dependencies = _Dependencies
	};
}

Text CreateManialink(Text _ComponentName){
	assert(G_Components.existskey(_ComponentName),"""[CreateManialink] Component {{{_ComponentName}}} has not been created""");
	

	declare Text[] CompNames;
	CompNames.add(_ComponentName);
	declare Integer[Text] CompMaxDepth;

	declare Integer Depth = 0;
	while (CompNames.count != 0) {
		declare CompNames2 = CompNames;
		CompNames.clear();
		foreach (CompName in CompNames2) {
			CompMaxDepth[CompName] = Depth;
			foreach (DepName in G_Components[CompName].Dependencies) {
				if(!CompNames.exists(DepName)){
					CompNames.add(DepName);
				}
			}
		}
		Depth += 1;
	}
	CompMaxDepth = CompMaxDepth.sortreverse();
	log(CompMaxDepth);

	declare Text[] UsedModels;
	declare Text[] UsedDirectives;
	declare Text[] UsedVariables;
	declare Text[] UsedFunctions;
	declare Text[] UsedLabels;

	foreach (CompName => I in CompMaxDepth) {
		declare K_Component Comp = G_Components[CompName];
		UsedModels.add(Comp.Model);
		UsedDirectives.add(Comp.Directives);
		UsedVariables.add(Comp.Variables);
		UsedFunctions.add(Comp.Functions);
		UsedLabels.add(Comp.Labels);
	}

	return"""
<manialink version="3" name="{{{_ComponentName}}}">
{{{TL::Join("",UsedModels)}}}
<frameinstance modelid="{{{_ComponentName}}}"/>
<script><!--
#Include "TextLib" as TL
#Include "MathLib" as ML

{{{TL::Join("",UsedDirectives)}}}
{{{TL::Join("",UsedVariables)}}}
{{{TL::Join("",UsedFunctions)}}}
{{{TL::Join("",UsedLabels)}}}

Void NOOP(){}
main(){
	+++Init+++
	while(True){
		yield;
		+++Yield+++
	}
}
--></script>
</manialink>""";
}


declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	G_Components.clear();
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
}