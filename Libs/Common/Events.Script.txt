#Struct K_Event {
	Text Name;
	Text Source;
	Text[] Texts;
	Integer[] Integers;
	Real[] Reals;
	Boolean[] Booleans;
}

#Struct K_SortedEvent {
	Text Name;
	Text Source;
	Integer ExpireAt;
	Text[] Texts;
	Integer[] Integers;
	Real[] Reals;
	Boolean[] Booleans;
}

//SECTION OneShotEvents
declare K_Event[] G_PendingEvents;

Void Create(Text _Name,Text _Source, Text[] _Texts,Integer[] _Integers, Real[] _Reals, Boolean[] _Booleans) {
	G_PendingEvents.add(K_Event{
		Name = _Name,
		Source = _Source,
		Texts = _Texts,
		Integers = _Integers,
		Reals = _Reals,
		Booleans = _Booleans
	});
}

K_Event[] GetPending() {
	declare Return = G_PendingEvents;
	G_PendingEvents.clear();
	return Return;
}
//!SECTION

//SECTION SortedEvents

declare K_SortedEvent[][Integer] G_PendingSortedEvents;

Void CreateSorted(Integer _EventTime,Integer _LifeTime, Text _Name,Text _Source,Text[] _Texts,Integer[] _Integers, Real[] _Reals, Boolean[] _Booleans) {
	declare Event = K_SortedEvent{
		Name = _Name,
		Source = _Source,
		ExpireAt = Now + _LifeTime,
		Texts = _Texts,
		Integers = _Integers,
		Reals = _Reals,
		Booleans = _Booleans
	};
	if(G_PendingSortedEvents.existskey(_EventTime)){
		G_PendingSortedEvents[_EventTime].add(Event);
	}else{
		G_PendingSortedEvents[_EventTime] = [Event];
	}
}

Void RemoveAllSortedWithSource(Text _Source){
	declare K_SortedEvent[][Integer] New;

	foreach (EventsTime => Events in G_PendingSortedEvents) {
		foreach (Event in Events) {
			if(Event.Source == _Source) continue;
			if(New.existskey(EventsTime)){
				New[EventsTime].add(Event);
			}else{
				New[EventsTime] = [Event];
			}
		}
	}

	G_PendingSortedEvents = New;
}

K_SortedEvent[][Integer] GetPendingSorted() {
	declare K_SortedEvent[][Integer] Return;

	G_PendingSortedEvents = G_PendingSortedEvents.sort();

	foreach (EventsTime => Events in G_PendingSortedEvents) {
		
		declare ExpireAt = Events[0].ExpireAt;
		
		if (ExpireAt <= Now) {
			Return[EventsTime] = G_PendingSortedEvents[EventsTime];
			G_PendingSortedEvents.removekey(EventsTime);
		} else {
			break;
		}
	}
	return Return;
}
//!SECTION 


declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
}