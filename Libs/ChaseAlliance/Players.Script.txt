//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/Spawn.Script.txt" as Spawn
#Include "ChaseAlliance/Libs/Common/Messages.Script.txt" as Messages
#Include "ChaseAlliance/Libs/Common/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/ChaseAlliance/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/Ranked.Script.txt" as Ranked
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/GameStates.Script.txt" as GameStates

#Include "TextLib" as TL

#Const C_ChangeClan "Players_ChangeClan"
#Const C_ChangeToSpec "Players_ChangeToSpec"
#Const C_ChangeToPlayer "Players_ChangeToPlayer"

Boolean _TryJoinClan(CSmPlayer _Player,Integer _Clan){
	if( _Clan == 1 && ClansNbPlayers[1] < Settings::C_MaxPlayerPerTeam){
		ServerAdmin.ForcePlayerRequestedTeam(_Player.User, 1);
		SetPlayerClan(_Player,1);
		return True;
	}
	if( _Clan == 2 && ClansNbPlayers[2] < Settings::C_MaxPlayerPerTeam){
		ServerAdmin.ForcePlayerRequestedTeam(_Player.User, 2);
		SetPlayerClan(_Player,2);
		return True;
	}
	return False;
}

Void _SetSpectator(CSmPlayer _Player){
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	ServerAdmin.ForceSpectator(_Player.User, CServerAdmin::ESpecMode::SpectatorSelectable);
}

Void _SetClan(CSmPlayer _Player,Integer _Clan){
	
	if(_Player.CurrentClan == _Clan) return;
	//check if player is not spawned as SetPlayerClan will fail if player is spawned.
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	declare CUIConfig UI = UIManager.GetUI(_Player);

	if(_Clan == 1){
		if(_TryJoinClan(_Player,1)){
			if(UI != Null) UI.SendChat("You joined $"^TL::ColorToText(Teams[0].ColorUI)^Teams[0].Name);
			return;
		}else{
			if(_Player.CurrentClan == 2) return;
			if(_TryJoinClan(_Player,2)){
				if(UI != Null) UI.SendChat("$"^TL::ColorToText(Teams[0].ColorUI)^Teams[0].Name^"$g is full! You joined $"^TL::ColorToText(Teams[1].ColorUI)^Teams[1].Name);
				return;
			}else{
				if(UI != Null) UI.SendChat("Both teams are full! You've been set to spectator");
				_SetSpectator(_Player);
				return;
			}
		}
	}
	if(_Clan == 2){
		if(_TryJoinClan(_Player,2)){
			if(UI != Null) UI.SendChat("You joined $"^TL::ColorToText(Teams[1].ColorUI)^Teams[1].Name);
			return;
		}else{
			if(_Player.CurrentClan == 1) return;
			if(_TryJoinClan(_Player,1)){
				if(UI != Null) UI.SendChat("$"^TL::ColorToText(Teams[1].ColorUI)^Teams[1].Name^"$g is full! You joined $"^TL::ColorToText(Teams[0].ColorUI)^Teams[0].Name);
				return;
			}else{
				if(UI != Null) UI.SendChat("Both teams are full! You've been set to spectator");
				_SetSpectator(_Player);
				return;
			}
		}
	}
	_SetSpectator(_Player);
}

Void Spawn(CSmPlayer _Player,Integer _When){
	
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	if(_Player.CurrentClan == 0){
		_SetClan(_Player,_Player.RequestedClan);
	}
	if(_Player.CurrentClan != 1 && _Player.CurrentClan != 2) return;
	SpawnPlayer(_Player,_Player.CurrentClan,1,Spawn::Get(),_When);
	_Player.UseCrudeExtrapolation = False;
	_Player.TrustClientSimu = True;
	_Player.Dossard_Color = Teams[_Player.CurrentClan-1].ColorUI;
}

Void SpawnAll(Integer _When){
	foreach (Player in Players) {
		Spawn(Player,_When);
	}
}

Integer GetCurrentPlayerCount(){
	declare Integer PlayerCount = 0;
	foreach (Player in Players) {
		if(!TL::StartsWith("*fakeplayer" , Player.User.Login)){
			PlayerCount+=1;		
		} 
	}
	// return ClansNbPlayers[0] + ClansNbPlayers[1] + ClansNbPlayers[2];
	return PlayerCount;
}

Void PassUIEvent(CUIConfigEvent _Event){
	if(_Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent) return;
	if(_Event.UI == Null) return;
	
	if(_Event.CustomEventType == C_ChangeClan){
		declare Player = GetPlayer(_Event.UI);
		if (!Ranked::PlayerIsInRankedGame(Player)){
			declare Integer Clan;
			if(Player.CurrentClan == 0) Clan = Player.RequestedClan;
			if(Player.CurrentClan == 1) Clan = 2;
			if(Player.CurrentClan == 2) Clan = 1;
			_SetClan(Player,Clan);
		}else{
			declare CUIConfig UI = UIManager.GetUI(Player);
			if(UI != Null) UI.SendChat("You cannot change team while in a ranked game");
		}

		
	}
	if(_Event.CustomEventType == C_ChangeToSpec){
		declare Player = GetPlayer(_Event.UI);
		if (!Ranked::PlayerIsInRankedGame(Player)){
			_SetSpectator(Player);
		}else{
			declare CUIConfig UI = UIManager.GetUI(Player);
			if(UI != Null) UI.SendChat("You cannot go in spectator while in a ranked game");
		}
	}
	if(_Event.CustomEventType == C_ChangeToPlayer){
		declare Player = GetPlayer(_Event.UI);
		if (!Ranked::PlayerIsInRankedGame(Player) && Settings::GetRankedMode() <= 0 || Ranked::PlayerIsInRankedGame(Player)){
			ServerAdmin.ForceSpectator(Player.User, CServerAdmin::ESpecMode::PlayerSelectable);
			_SetClan(Player,Player.RequestedClan);
		}else{
			declare CUIConfig UI = UIManager.GetUI(Player);
			if(UI != Null) UI.SendChat("Wait for the ranked game to end before joining a team");
		}
		
	}
}

Void PassModeEvent(CSmModeEvent _Event){
	if(_Event.Player == Null) return;
	if(_Event.Type == CSmModeEvent::EType::OnPlayerAdded){
		_SetClan(_Event.Player,_Event.Player.RequestedClan);
	}
	if(GameState::Is(GameStates::C_Playing))return;
	if((_Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn && _Event.GiveUp) || 
		(_Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint && _Event.IsFinish)){
		UnspawnPlayer(_Event.Player);
	}
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Spawn::Load();
	Events::Load();
	GameState::Load();
}