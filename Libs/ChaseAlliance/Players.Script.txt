//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/Spawn.Script.txt" as Spawn
#Include "ChaseAlliance/Libs/Common/Messages.Script.txt" as Messages
#Include "ChaseAlliance/Libs/ChaseAlliance/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/ChaseAlliance/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "TextLib" as TL

#Const C_ChangeClan "Players_ChangeClan"
#Const C_ChangeToSpec "Players_ChangeToSpec"
#Const C_ChangeToPlayer "Players_ChangeToPlayer"

Boolean _TryJoinClan(CSmPlayer _Player,Integer _Clan){
	if( _Clan == 1 && ClansNbPlayers[1] < Settings::C_MaxPlayerPerTeam){
		declare Integer ForcedClan for _Player.User = 1;
		ForcedClan = 1;
		SetPlayerClan(_Player,1);
		return True;
	}
	if( _Clan == 2 && ClansNbPlayers[2] < Settings::C_MaxPlayerPerTeam){
		ServerAdmin.ForcePlayerRequestedTeam(_Player.User, 2);
		declare Integer ForcedClan for _Player.User = 2;
		ForcedClan = 2;
		SetPlayerClan(_Player,2);
		return True;
	}
	return False;
}

Void _SetSpectator(CSmPlayer _Player){
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	SetPlayerClan(_Player,0);
	ServerAdmin.ForceSpectator(_Player.User, CServerAdmin::ESpecMode::SpectatorSelectable);
}

Boolean _SetClan(CSmPlayer _Player,Integer _Clan){
	
	if(_Player.CurrentClan == _Clan) return True;
	//check if player is not spawned as SetPlayerClan will fail if player is spawned.
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	declare CUIConfig UI = UIManager.GetUI(_Player);

	if(_Clan == 1){
		if(_TryJoinClan(_Player,1)){
			if(UI != Null) UI.SendChat("You joined $"^TL::ColorToText(Teams[0].ColorUI)^Teams[0].Name);
			return True;
		}else{
			if(_TryJoinClan(_Player,2)){
				if(UI != Null) UI.SendChat("$"^TL::ColorToText(Teams[0].ColorUI)^Teams[0].Name^"$zis full! You joined $"^TL::ColorToText(Teams[1].ColorUI)^Teams[1].Name);
				return True;
			}else{
				if(UI != Null) UI.SendChat("Both teams are full! You've been set to spectator");
				_SetSpectator(_Player);
				return False;
			}
		}
	}
	if(_Clan == 2){
		if(_TryJoinClan(_Player,2)){
			if(UI != Null) UI.SendChat("You joined $"^TL::ColorToText(Teams[1].ColorUI)^Teams[1].Name);
			return True;
		}else{
			if(_TryJoinClan(_Player,1)){
				if(UI != Null) UI.SendChat("$"^TL::ColorToText(Teams[1].ColorUI)^Teams[1].Name^"$zis full! You joined $"^TL::ColorToText(Teams[0].ColorUI)^Teams[0].Name);
				return True;
			}else{
				if(UI != Null) UI.SendChat("Both teams are full! You've been set to spectator");
				_SetSpectator(_Player);
				return False;
			}
		}
	}
	_SetSpectator(_Player);
	return False;
}

Void _AttachMarkers(CSmPlayer _Player) {
	declare CUIConfigMarker[] CMarkers = UIManager.UIAll.Markers;
	declare Text[] UsedFrameIds;
	foreach (Marker in CMarkers) {
		if(Marker.Type != CUIConfigMarker::EAnchorType::Player) continue;
		//player already has marker
		if(Marker.ImageUrl == _Player.User.Login) return;
		UsedFrameIds.add(Marker.ManialinkFrameId);
	}
	for(I,0,20){
		if(!UsedFrameIds.exists("player-"^I)){
			declare Marker = UIManager.UIAll.AddMarker(_Player);
			Marker.HudVisibility = CUIConfigMarker::EHudVisibility::Always;
			Marker.Box = <0.,0.,0.>;
			Marker.ImageUrl = _Player.User.Login; //NOTE - shameless hijacking of the ImageUrl Text value to pass the attached player login to the client
			Marker.ManialinkFrameId = "player-"^I;
			Marker.HideOnSelf = True;
			break;
		}
	}
}

Void Spawn(CSmPlayer _Player,Integer _When){
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	declare Integer ForcedClan for _Player.User = 0;
	if(ForcedClan == 0) return;
	SpawnPlayer(_Player,ForcedClan,1,Spawn::Get(),_When);
	_AttachMarkers(_Player);
	_Player.UseCrudeExtrapolation = False;
	_Player.TrustClientSimu = True;
	_Player.Dossard_Color = Teams[_Player.CurrentClan-1].ColorPrimary;
}

Void SpawnAll(Integer _When){
	foreach (Player in Players) {
		Spawn(Player,_When);
	}
}

Void PassUIEvent(CUIConfigEvent _Event){
	if(_Event.Type != CUIConfigEvent::EType::OnLayerCustomEvent) return;
	if(_Event.UI == Null) return;
	
	if(_Event.CustomEventType == C_ChangeClan){
		declare Player = GetPlayer(_Event.UI);
		declare Integer ForcedClan for Player.User = 0; //TODO: ForcedClan should be readonly, protect it
		declare Integer Clan;
		if(ForcedClan == 0) Clan = Player.RequestedClan;
		if(ForcedClan == 1) Clan = 2;
		if(ForcedClan == 2) Clan = 1;
		if(_SetClan(Player,Clan) && GameState::IsWaiting()){
			Spawn(Player,Now+1500);
		}
	}
	if(_Event.CustomEventType == C_ChangeToSpec){
		declare Player = GetPlayer(_Event.UI);
		_SetSpectator(Player);
	}
	if(_Event.CustomEventType == C_ChangeToPlayer){
		declare Player = GetPlayer(_Event.UI);
		ServerAdmin.ForceSpectator(Player.User, CServerAdmin::ESpecMode::PlayerSelectable);
		declare Integer ForcedClan for Player.User = 0; //TODO: ForcedClan should be readonly, protect it
		declare Integer Clan;
		if(ForcedClan == 0) Clan = Player.RequestedClan;
		if(ForcedClan == 1 || ForcedClan == 2) Clan = ForcedClan;
		_SetClan(Player,Clan);
	}
}

Void PassModeEvent(CSmModeEvent _Event){
	if(_Event.Player == Null) return;
	if(GameState::IsWaiting()){
		if((_Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn && _Event.GiveUp) || 
			(_Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint && _Event.IsFinish)){
			Spawn(_Event.Player,Now+1500);
		}
		if(_Event.Type == CSmModeEvent::EType::OnPlayerAdded){
			if(_SetClan(_Event.Player,_Event.Player.RequestedClan) && GameState::IsWaiting()){
				Spawn(_Event.Player,Now+1500);
			}
		}
	}
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Spawn::Load();
	GameState::Load();
}