//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/Spawn.Script.txt" as Spawn
#Include "TextLib" as TL
#Include "ChaseAlliance/Libs/ChaseAlliance/GameState.Script.txt" as GameState

#Const C_NeedRespawn "NeedRespawn"
#Const C_ForcePlayer "ForcePlayer"
#Const C_ForceSpectator "ForceSpectator"


Void _SetClan(CSmPlayer _Player){
	if(_Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned){
		UnspawnPlayer(_Player);
	}
	if(_Player.RequestedClan < 1 || _Player.RequestedClan > 2){
		if(ClansNbPlayers[1] < ClansNbPlayers[2]){
			SetPlayerClan(_Player,1);
		}else{
			SetPlayerClan(_Player,2);
		}
	}else{
		SetPlayerClan(_Player,_Player.RequestedClan);
	}
}

Void Spawn(CSmPlayer _Player,Integer _When){
	if (_Player == Null) return;
	_SetClan(_Player);
	SpawnPlayer(
		_Player,
		_Player.CurrentClan,
		1,
		Spawn::Get(),
		_When);
	_Player.UseCrudeExtrapolation = False;
	_Player.TrustClientSimu = True;
	_Player.Dossard_Color = Teams[_Player.CurrentClan-1].ColorPrimary;
}

Void Spawn(CSmPlayer _Player){
	Spawn(_Player,Now + 1500);
}

Void SpawnAll(Integer _When){
	foreach (Player in Players) {
		Spawn(Player,_When);
	}
}

Void PassUIEvent(CUIConfigEvent _Event){
	if(_Event.Type == CUIConfigEvent::EType::OnLayerCustomEvent){
		if(_Event.UI != Null){
			declare Player = GetPlayer(_Event.UI);
			if(_Event.CustomEventType == C_NeedRespawn){
				Spawn(Player);
			}
			if(_Event.CustomEventType == C_ForcePlayer){
				ServerAdmin.ForceSpectator(Player.User, CServerAdmin::ESpecMode::PlayerSelectable);
			}
			if(_Event.CustomEventType == C_ForceSpectator){
				ServerAdmin.ForceSpectator(Player.User, CServerAdmin::ESpecMode::SpectatorSelectable);
			}
		}
	}
}

Void PassModeEvent(CSmModeEvent _Event){
	if(_Event.Player == Null) return;
	if(GameState::IsWaitingOrPause()){
		if((_Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn && _Event.GiveUp) || 
			(_Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint && _Event.IsFinish)){
			Spawn(_Event.Player);
		}
	}else{
		if(_Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint && _Event.IsFinish){
			UnspawnPlayer(_Event.Player);
		}
	}
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Spawn::Load();
	GameState::Load();
}