//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"

#Include "ChaseAlliance/Libs/Common/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/GameStates.Script.txt" as GameStates

#Include "TextLib" as TL
#Include "MathLib" as ML

#Const C_MaxPlayerPerTeam 3

#Struct K_Settings {
	Integer RelayerCount;
	Integer RelayGap;
	Integer RelaySortDelay;
	Integer LapCount;
	Integer MapCount;
	Integer RoundCount;
}

declare K_Settings G_Settings;

Void ToNet(){
	declare netwrite K_Settings Net_Settings for Teams[0] = G_Settings;
	declare netwrite Integer Net_SettingsChange for Teams[0] = Now;
	Net_Settings = G_Settings;
	Net_SettingsChange = Now;
}

Void SetRelayerCount(Integer _Value){
	if(G_Settings.RelayerCount != _Value){
		G_Settings.RelayerCount = ML::Clamp(_Value,2,3);
		UIManager.UIAll.SendChat("$"^TL::ColorToText(Colors::C_WarmUp)^"RelayerCount changed to "^G_Settings.RelayerCount^" relayers");
	}
}

Integer GetRelayerCount(){
	return G_Settings.RelayerCount;
}

Void SetRelayGap(Integer _Value){
	if(G_Settings.RelayGap != _Value){
		G_Settings.RelayGap = ML::Clamp(_Value,2,65535);
		UIManager.UIAll.SendChat("$"^TL::ColorToText(Colors::C_WarmUp)^"RelayGap changed to "^G_Settings.RelayGap^" points");

	}
}

Integer GetRelayGap(){
	return G_Settings.RelayGap;
}

Void SetRelaySortDelay(Integer _Value){
	if(G_Settings.RelaySortDelay != _Value){
		G_Settings.RelaySortDelay = ML::Clamp(_Value,50,500);
		UIManager.UIAll.SendChat("$"^TL::ColorToText(Colors::C_WarmUp)^"RelaySortDelay changed to "^G_Settings.RelaySortDelay^" ms");
	}
}

Integer GetRelaySortDelay(){
	return G_Settings.RelaySortDelay;
}

Void SetLapCount(Integer _Value){
	if(G_Settings.LapCount != _Value){
		G_Settings.LapCount = ML::Clamp(_Value,1,65535);
		UIManager.UIAll.SendChat("$"^TL::ColorToText(Colors::C_WarmUp)^"LapCount changed to "^_Value^" laps");
		LapCountOverride = _Value;
	}
}

Integer GetLapCount(){
	return G_Settings.LapCount;
}

Void SetRoundCount(Integer _Value){
	if(G_Settings.RoundCount != _Value){
		G_Settings.RoundCount = ML::Clamp(_Value,1,65535);
		UIManager.UIAll.SendChat("$"^TL::ColorToText(Colors::C_WarmUp)^"RoundCount changed to "^G_Settings.RoundCount^" rounds");

	}
}

Integer GetRoundCount(){
	return G_Settings.RoundCount;
}

Void SetMapCount(Integer _Value){
	if(G_Settings.MapCount != _Value){
		G_Settings.MapCount = ML::Clamp(_Value,1,65535);
		UIManager.UIAll.SendChat("$"^TL::ColorToText(Colors::C_WarmUp)^"MapCount changed to "^G_Settings.MapCount^" maps");

	}
}

Integer GetMapCount(){
	return G_Settings.MapCount;
}

Void ApplySettings(){
	UIManager.UIAll.AlliesLabelsMaxCount = 20;

	//force hide default markers
	UIManager.UIAll.AlliesLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
	UIManager.UIAll.AlliesLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.AlliesLabelsShowGauges = CUIConfig::EVisibility::ForcedHidden;

	UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
	UIManager.UIAll.TeamLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.TeamLabelsShowGauges = CUIConfig::EVisibility::ForcedHidden;

	UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::Never;
	UIManager.UIAll.OpposingTeamLabelsShowNames = CUIConfig::EVisibility::ForcedHidden;
	UIManager.UIAll.OpposingTeamLabelsShowGauges = CUIConfig::EVisibility::ForcedHidden;

	//force visible custom markers
	UIManager.UIAll.LabelsVisibility = CUIConfig::EHudVisibility::Everything;

	UIManager.UIAll.UISequence_CutSceneStyle = CUIConfig::ECutSceneStyle::TM;
	
	UIManager.UIAll.OverlayHideChat = False;
	
	UIManager.UIAll.OverlayHideNotices = True;
	UIManager.UIAll.DisplayControl_UseEsportsProgrammation = True;
	UIManager.UIAll.LabelsVisibility_SkipMarkersOnly = True;
	UIManager.UIAll.OverlayHideMapInfo = True;
	UIManager.UIAll.OverlayHideOpponentsInfo = True;
	UIManager.UIAll.OverlayHideCheckPointList = True;
	UIManager.UIAll.OverlayHideRoundScores = True;
	UIManager.UIAll.OverlayHideCountdown = True;
	UIManager.UIAll.OverlayHideCrosshair = True;
	UIManager.UIAll.OverlayHideGauges = True;
	UIManager.UIAll.OverlayHideConsumables = True;
	UIManager.UIAll.OverlayHide321Go = False;
	UIManager.UIAll.OverlayMute321Go = False;
	UIManager.UIAll.OverlayHideBackground = True;
	UIManager.UIAll.OverlayHideChrono = True;
	UIManager.UIAll.OverlayHideSpeedAndDist = True;
	UIManager.UIAll.OverlayHidePersonnalBestAndRank = True;
	UIManager.UIAll.OverlayHidePosition = True;
	UIManager.UIAll.OverlayHideCheckPointTime = True;
	UIManager.UIAll.OverlayHideEndMapLadderRecap = True;
	UIManager.UIAll.OverlayHideMultilapInfos = True;
	UIManager.UIAll.OverlayHideSpectatorControllers = True;
	UIManager.UIAll.OverlayHideSpectatorInfos = True;
	UIManager.UIAll.OverlayChatHideAvatar = True;
	UIManager.UIAll.DisableZoomTransitions = True;

	UIManager.UIAll.ScoreTableOnlyManialink = True; // Hide default score board

	SpawnInvulnerabilityDuration = 0;
	UnspawnAnimDuration = 0;
	SpawnDelayDuration = 0;
	CheckpointBehaviour = CSmMode::ECheckpointBehaviour::Default;
	RespawnBehaviour = CSmMode::ERespawnBehaviour::AlwaysRespawn;
	GiveUpBehaviour = CSmMode::EGiveUpBehaviour::DoNothing;
	UseMultiClans = False;
	UseClans = True;
	UseForcedClans = False;
	UsePvPCollisions = False;
	UsePvECollisions = False;
	// UsePvECollisions = True; //to force ghosts on
	UseGuns = False;
	UsePvPWeapons = False;
	UseInterractiveScreensIn3d = False;
	UseLaserVsBullets = False;
	UseLaserSkewering = False;
	UsePlayerTagging = False;
	UseBeaconsWithRecipients = False;
	UseAmmoBonusOnHit = False;
	UseSameWallJump = False;
	UseDefaultActionEvents = False;
	UseLaunchedCheckpoints = True;
	ReadonlyLaunchedCheckpoints = False;
	UseProtectClanmates = False;
	UseAllies = False;
	CrudeExtrapolation_AllowDelay = False;
}

Void _AllowGiveUp(){
	RespawnBehaviour = CSmMode::ERespawnBehaviour::GiveUpBeforeFirstCheckpoint;
	GiveUpBehaviour = CSmMode::EGiveUpBehaviour::GiveUp;
}

Void _PreventGiveUp(){
	RespawnBehaviour = CSmMode::ERespawnBehaviour::AlwaysRespawn;
	GiveUpBehaviour = CSmMode::EGiveUpBehaviour::DoNothing;
}

Void PassLibEvent(Events::K_Event _Event){
	if(_Event.Source != GameState::C_EventSource)return;
	if(_Event.Name == GameState::C_EventChange){
		declare Integer State = _Event.Integers[0];
		if(State == GameStates::C_Playing){
			_PreventGiveUp();
		}else{
			_AllowGiveUp();
		}
	}
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	GameState::Load();
	Events::Load();
	ApplySettings();
	SetRelayerCount(3);
	SetRelayGap(3);
	SetRelaySortDelay(250);
	SetLapCount(5);
	SetRoundCount(3);
	SetMapCount(3);
	ToNet();
}