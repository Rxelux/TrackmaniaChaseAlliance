//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "TextLib" as TL

#Const C_Playing 0
#Const C_Waiting 1
#Const C_Pause 2

declare Integer G_GameState;

Void AllowGiveUp(){
	RespawnBehaviour = CSmMode::ERespawnBehaviour::GiveUpBeforeFirstCheckpoint;
	GiveUpBehaviour = CSmMode::EGiveUpBehaviour::GiveUp;
}

Void PreventGiveUp(){
	RespawnBehaviour = CSmMode::ERespawnBehaviour::AlwaysRespawn;
	GiveUpBehaviour = CSmMode::EGiveUpBehaviour::DoNothing;
}

Text GetStateText(){
	switch (G_GameState) {
		case 0: return "Playing";
		case 1: return "Waiting";
		case 2: return "Pause";
	}
	return "?";
}

Boolean IsPlaying(){
	return G_GameState == C_Playing;
}
Void SetPlaying(){
	G_GameState = C_Playing;
	PreventGiveUp();
}
Void SendPlayingNotice(){
	UIManager.UIAll.SendNotice(
		"$"^TL::ColorToText(Colors::C_Success)^"Starting round!", 
		CUIConfig::ENoticeLevel::MatchWarning, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
}


Boolean IsWaiting(){
	return G_GameState == C_Waiting;
}
Void SetWaiting(){
	G_GameState = C_Waiting;
	AllowGiveUp();
	foreach (Player in Players) {
		Player.Dossard_Color = <1.0,0.6,0.2>;
	}
}
Void SendWaitingNotice(){
	UIManager.UIAll.SendNotice(
		"$"^TL::ColorToText(Colors::C_Warning)^"Waiting for players!", 
		CUIConfig::ENoticeLevel::MatchWarning, Null, CUIConfig::EAvatarVariant::Default, CUIConfig::EUISound::Silence, 0);
}

Boolean IsPause(){
	return G_GameState == C_Pause;
}
Void SetPause(){
	G_GameState = C_Pause;
	AllowGiveUp();
}

Boolean IsWaitingOrPause(){
	return G_GameState > 0;
}

Void PassLibEvent(Events::K_Event _Event){
	if(_Event.Name == "Pause"){
		if(IsPause()){
			SetWaiting();
		}else{
			SetPause();
		}
	}
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	G_GameState = 1;//"Waiting";
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Events::Load();
}