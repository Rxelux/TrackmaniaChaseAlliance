//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "ChaseAlliance/Libs/Common/Commands.Script.txt" as Commands

#Include "TextLib" as TL

#Const C_EventSource "GameState"
#Const C_EventOnPlaying "OnPlaying"
#Const C_EventOnWaiting "OnWaiting"
#Const C_EventOnWarmUp "OnWarmUp"
#Const C_EventOnPause "OnPause"
#Const C_Playing 0
#Const C_Waiting 1
#Const C_WarmUp 2
#Const C_Pause 3

declare Integer G_GameState;

Text GetStateText(){
	switch (G_GameState) {
		case C_Playing: return "Playing";
		case C_Waiting: return "Waiting";
		case C_WarmUp: return "Warm-Up";
		case C_Pause: return "Pause";
	}
	return "";
}

Void ToNet(){
	declare netwrite Integer Net_GameState for Teams[0] = 1;
	Net_GameState = G_GameState;
}

Boolean IsPlaying(){
	return G_GameState == C_Playing;
}
Void SetPlaying(){
	declare Integer PrevState = G_GameState;
	G_GameState = C_Playing;
	ToNet();
	Events::Create(C_EventOnPlaying,C_EventSource,[],[PrevState],[],[]);
}

Boolean IsWaiting(){
	return G_GameState == C_Waiting;
}
Void SetWaiting(){
	declare Integer PrevState = G_GameState;
	G_GameState = C_Waiting;
	ToNet();
	Events::Create(C_EventOnWaiting,C_EventSource,[],[PrevState],[],[]);
}

Boolean IsWarmUp(){
	return G_GameState == C_WarmUp;
}
Void SetWarmUp(){
	declare Integer PrevState = G_GameState;
	G_GameState = C_WarmUp;
	ToNet();
	Events::Create(C_EventOnWarmUp,C_EventSource,[],[PrevState],[],[]);
}

Boolean IsPause(){
	return G_GameState == C_Pause;
}
Void SetPause(){
	declare Integer PrevState = G_GameState;
	G_GameState = C_Pause;
	ToNet();
	Events::Create(C_EventOnPause,C_EventSource,[],[PrevState],[],[]);
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	SetWarmUp();
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Events::Load();
	Commands::Load();
}