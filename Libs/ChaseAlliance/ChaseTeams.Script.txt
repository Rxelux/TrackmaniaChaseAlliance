//#RequireContext CSmMode
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/Messages.Script.txt" as Messages
#Include "ChaseAlliance/Libs/Common/Events.Script.txt" as Events
#Include "ChaseAlliance/Libs/Common/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/Common/Commands.Script.txt" as Commands
#Include "ChaseAlliance/Libs/ChaseAlliance/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/GameStates.Script.txt" as GameStates

#Include "TextLib" as TL
#Include "ColorLib" as CL
#Include "MathLib" as ML

#Const C_EventSource "ChaseTeams"

#Const C_WinByKo 0
#Const C_WinByFinish 1
#Const C_WinByForfeit 2

#Struct K_ChaseTeams {
	Integer MapPoints;
	Integer RoundPoints;
	Integer RelayPoints;
	Text RelayerLogin;
	Integer CurrentCp;
	Integer LastSuccessfulRelayCp;
	Integer CpCrossCount;
	Boolean RelayStarted;
}

declare K_ChaseTeams[] G_ChaseTeams;

declare Integer G_WinState;
declare Integer G_WinClan;

K_ChaseTeams GetTeam(Integer _Clan){
	return G_ChaseTeams[_Clan-1];
}

K_ChaseTeams GetOpposingTeam(Integer _Clan){
	declare Integer[] LUT = [1,0];
	return G_ChaseTeams[LUT[_Clan-1]];
}

Integer GetWinState(){
	return G_WinState;
}

Text GetWinStateString(){
	switch (G_WinState){
		case C_WinByFinish: return "Win by finish";
		case C_WinByForfeit: return "Win by forfeit";
		case C_WinByKo: return "Win by ko";
	}
	return "";
}

Integer GetWinClan(){
	return G_WinClan;
}

Void ToNet(){
	declare netwrite K_ChaseTeams[] Net_ChaseTeams for Teams[0] = G_ChaseTeams;
	declare netwrite Integer Net_ChaseTeamsChange for Teams[0] = Now;
	Net_ChaseTeams = G_ChaseTeams;
	Net_ChaseTeamsChange = Now;
}

Void _SetTeamMapPoint(Integer _Clan,Integer _Value){
	G_ChaseTeams[_Clan-1].MapPoints = _Value;
}

Void _SetTeamRoundPoint(Integer _Clan,Integer _Value){
	G_ChaseTeams[_Clan-1].RoundPoints = _Value;
}

Void _SetTeamRelayPoint(Integer _Clan,Integer _Value){
	G_ChaseTeams[_Clan-1].RelayPoints = _Value;
}

Void _SetTeamCurrentCp(Integer _Clan,Integer _Value){
	G_ChaseTeams[_Clan-1].CurrentCp = _Value;
}

Void _SetTeamLastSuccessfulRelayCp(Integer _Clan,Integer _Value){
	G_ChaseTeams[_Clan-1].LastSuccessfulRelayCp= _Value;
}

Void _SetTeamCpCrossCount(Integer _Clan,Integer _Value){
	G_ChaseTeams[_Clan-1].CpCrossCount = _Value;
}

Void _SetTeamRelayerLogin(Integer _Clan,Text _Value){
	G_ChaseTeams[_Clan-1].RelayerLogin = _Value;
}

Void _SetTeamRelayStarted(Integer _Clan,Boolean _Value){
	G_ChaseTeams[_Clan-1].RelayStarted = _Value;
}

Void _IncrementTeamRelayPoint(Integer _Clan){
	_SetTeamRelayPoint(_Clan,G_ChaseTeams[_Clan-1].RelayPoints + 1);
}

Void _ResetTeamRelay(Integer _Clan){
	_SetTeamRelayPoint(_Clan,0);
	_SetTeamCurrentCp(_Clan,0);
	_SetTeamLastSuccessfulRelayCp(_Clan,0);
	_SetTeamCpCrossCount(_Clan,0);
	_SetTeamRelayerLogin(_Clan,"");
	_SetTeamRelayStarted(_Clan,False);
	G_WinState = -1;
	G_WinClan = -1;
}

Void IncrementTeamRoundPoint(Integer _Clan){
	_SetTeamRoundPoint(_Clan,G_ChaseTeams[_Clan-1].RoundPoints + 1);
}

Integer GetTeamRoundPoint(Integer _Clan){
	return G_ChaseTeams[_Clan-1].RoundPoints;
}

Void _ResetTeamRoundPoint(Integer _Clan){
	_SetTeamRoundPoint(_Clan,0);
}

Void ResetTeamsRoundPoint(){
	_ResetTeamRoundPoint(1);
	_ResetTeamRoundPoint(2);
}

Void IncrementTeamMapPoint(Integer _Clan){
	_SetTeamMapPoint(_Clan,G_ChaseTeams[_Clan-1].MapPoints + 1);
}

Integer GetTeamMapPoint(Integer _Clan){
	return G_ChaseTeams[_Clan-1].MapPoints;
}

Void _ResetTeamMapPoint(Integer _Clan){
	_SetTeamMapPoint(_Clan,0);
}

Void ResetTeamsMapPoint(){
	_ResetTeamMapPoint(1);
	_ResetTeamMapPoint(2);
}

Void ResetTeamsRelay(){
	_ResetTeamRelay(1);
	_ResetTeamRelay(2);
	Events::RemoveAllSortedWithSource(C_EventSource);
}

Void ResetChaseTeams(){
	ResetTeamsMapPoint();
	ResetTeamsRoundPoint();
	ResetTeamsRelay();
}

Boolean IsComplete(Integer _Clan){
	return ClansNbPlayers[_Clan] >= Settings::GetRelayerCount();
}

Boolean AreComplete(){
	return IsComplete(1) && IsComplete(2);
}

Void PassModeEvent(CSmModeEvent _Event){
	if(G_WinState >= 0) return;
	if(GameState::Is(GameStates::C_Playing) && _Event.Type == CSmModeEvent::EType::OnPlayerTriggersWaypoint){
		if(_Event.Player == Null) return;
		if(_Event.Player.CurrentClan != 1 && _Event.Player.CurrentClan != 2)return;
		//add event to sorted event

		Events::CreateSorted(
			_Event.WaypointTime,
			Settings::GetRelaySortDelay(),
			"WaypointTrigger",
			C_EventSource,
			[_Event.Player.User.Login],
			[_Event.Player.CurrentClan,_Event.Player.RaceWaypointTimes.count],
			[],
			[_Event.IsFinish]);
	}
}


Void PassLibEvent(Events::K_Event _Event){
	if(_Event.Source != Commands::C_EventSource)return;

	switch (_Event.Name) {
		case "SetMapPoint": {
			if(_Event.Texts.count >= 2){
				_SetTeamMapPoint(
					ML::Clamp(TL::ToInteger(_Event.Texts[0]),1,2),
					ML::Clamp(TL::ToInteger(_Event.Texts[1]),0,65535)
				);
				ToNet();
			}
		}
		case "SetRoundPoint": {
			if(_Event.Texts.count >= 2){
				_SetTeamRoundPoint(
					ML::Clamp(TL::ToInteger(_Event.Texts[0]),1,2),
					ML::Clamp(TL::ToInteger(_Event.Texts[1]),0,65535)
				);
				ToNet();
			}
		}
	}
}


Void PassLibSortedEvent(Integer _EventsTime, Events::K_SortedEvent[] _Events){

	if(G_WinState >= 0) return;

	//here event are in order
	
	declare Boolean NeedUpdateNet = False;

	//since we now have all the events that occured at the same time we can use this to make sure that
	//in case of a tie between relayer and chaser the relay is always successful and not random based on ping
	//and that in case of a finsh and ko the finish has priority
	declare Events::K_SortedEvent[] Events;
	foreach (Event in _Events) {
		if(Event.Source != C_EventSource) continue;
		declare PlayerLogin = Event.Texts[0];
		declare CSmPlayer Player = GetPlayer(PlayerLogin);
		//check if the player is still on the server since the event was added in the sort buffer
		if(Player == Null) continue;
		NeedUpdateNet = True;

		declare IsFinish = Event.Booleans[0];
		declare CurrentClan = Event.Integers[0];
		if(IsFinish){
			G_WinState = C_WinByFinish;
			G_WinClan = CurrentClan;
			Log(""""[ChaseTeams] Finish Reached Team Team{{{CurrentClan-1}}} Wins by finish""");
			ToNet();
			return;
		}

		declare K_ChaseTeams Team = GetTeam(CurrentClan);
		if(PlayerLogin == Team.RelayerLogin){
			Events.addfirst(Event);
		}else{
			Events.add(Event);
		}
	}

	Log("""[ChaseTeams] Events at {{{TL::TimeToText(_EventsTime,True,True)}}} : {{{Events}}}""");

	foreach (Event in Events) {
		if(G_WinState >= 0) continue;

		if(Event.Source != C_EventSource) continue;
		declare PlayerLogin = Event.Texts[0];
		declare CSmPlayer Player = GetPlayer(PlayerLogin);
		//check if the player is still on the server since the event was added in the sort buffer
		if(Player == Null) continue;

		//even tho we have the Player class we'll still use the old state of this player in case it changed since the event was added in the sort buffer
		//for exemple player could cross 2 cp in a time < sort buffer time
		declare CurrentClan = Event.Integers[0];
		declare RaceWaypoint = Event.Integers[1];

		declare K_ChaseTeams Team = GetTeam(CurrentClan);
		
		if(RaceWaypoint > Team.CurrentCp){ //crossed a new cp
			Log("""[ChaseTeams] Team{{{CurrentClan-1}}} {{{Player.User.Name}}} Crossed a new cp""");
			
			if(Team.RelayerLogin == PlayerLogin){//check if player is relayer
				Log("""[ChaseTeams] Team{{{CurrentClan-1}}} {{{Player.User.Name}}} was relayer""");
				//relay passed
				Log("""[ChaseTeams] Team{{{CurrentClan-1}}} Relay success""");
				
				declare K_ChaseTeams OpposingTeam = GetOpposingTeam(CurrentClan);
				_IncrementTeamRelayPoint(CurrentClan);
				_SetTeamRelayerLogin(CurrentClan,"");//reset relayer
				_SetTeamLastSuccessfulRelayCp(CurrentClan,RaceWaypoint);
				if((Team.RelayPoints+1) - OpposingTeam.RelayPoints >= Settings::GetRelayGap()){
					G_WinState = C_WinByKo;
					G_WinClan = CurrentClan;
					Log(""""[ChaseTeams] Relay gap reached, Team{{{CurrentClan-1}}} Wins by ko""");
				}else{
					Messages::SendBig(CurrentClan,"$"^TL::ColorToText(Colors::C_Success)^"Relay Success",3000,CUIConfig::EUISound::ScoreProgress);
					Messages::SendStatus(CurrentClan,"",0,CUIConfig::EUISound::Silence);
					Messages::SendStatus(Player,"Wait for players",3000,CUIConfig::EUISound::Silence);
				}

			}else{
				Log("""[ChaseTeams] Team{{{CurrentClan-1}}} {{{Player.User.Name}}} was Not relayer""");
				
				if(Team.RelayStarted){
					//relay failed
					Log("""[ChaseTeams] Team{{{CurrentClan-1}}} Relay failed""");
					Messages::SendBig(CurrentClan,"$"^TL::ColorToText(Colors::C_Failure)^"Relay Failed",3000,CUIConfig::EUISound::FirstHit);
					if(Team.RelayerLogin == ""){
						Messages::SendStatus(Player,"$"^TL::ColorToText(Colors::C_Failure)^"Wait for players",3000,CUIConfig::EUISound::Silence);
					}else{
						declare CSmPlayer RelayerPlayer = GetPlayer(Team.RelayerLogin);
						Messages::SendStatus(Player,"$"^TL::ColorToText(Colors::C_Failure)^"Wait for "^RelayerPlayer.User.Name,3000,CUIConfig::EUISound::Silence);
					}
				}else{
					//first cp crossed
					Log("""[ChaseTeams] Team{{{CurrentClan-1}}} First cp crossed""");
					Messages::SendStatus(Player,"Wait for players",3000,CUIConfig::EUISound::Silence);
					_SetTeamRelayStarted(CurrentClan, True);
				}
			}
			_SetTeamCurrentCp(CurrentClan,RaceWaypoint);
			_SetTeamCpCrossCount(CurrentClan,1);
		}
		else if (RaceWaypoint > Team.LastSuccessfulRelayCp){//crossed not a new cp but a cp ahead of the relayer
			if(Team.RelayerLogin != PlayerLogin){//check if player is not relayer
				Log("""[ChaseTeams] Team{{{CurrentClan-1}}} {{{Player.User.Name}}} Rushed a previous cp""");
				if(Team.RelayStarted){
					//relay failed
					Log("""[ChaseTeams] Team{{{CurrentClan-1}}} Relay failed""");
					if(Team.RelayerLogin == ""){
						Messages::SendStatus(Player,"$"^TL::ColorToText(Colors::C_Failure)^"Wait for players",3000,CUIConfig::EUISound::Silence);
					}else{
						declare CSmPlayer RelayerPlayer = GetPlayer(Team.RelayerLogin);
						Messages::SendStatus(Player,"$"^TL::ColorToText(Colors::C_Failure)^"Wait for "^RelayerPlayer.User.Name,3000,CUIConfig::EUISound::Silence);
					}
				}
			}
		}
		if(RaceWaypoint == Team.CurrentCp){ //crossed the current cp
			Log("""[ChaseTeams] Team{{{CurrentClan-1}}} {{{Player.User.Name}}} Crossed current cp""");
			if(Team.CpCrossCount == Settings::GetRelayerCount()-1){//current cp was crossed by all team but this player
				Log("""[ChaseTeams] Team{{{CurrentClan-1}}} {{{Player.User.Name}}} Current cp was crossed by all team""");
				if(Team.RelayerLogin == ""){
					_SetTeamRelayerLogin(CurrentClan, PlayerLogin);

					if(Team.LastSuccessfulRelayCp == Team.CurrentCp || Team.CurrentCp == 1){
						Messages::SendBig(CurrentClan,"$"^TL::ColorToText(Colors::C_Success)^""^Player.User.Name,3000,CUIConfig::EUISound::Warning);
					}else{
						Messages::SendBig(CurrentClan,"$"^TL::ColorToText(Colors::C_Failure)^""^Player.User.Name,3000,CUIConfig::EUISound::Warning);
					}
					Messages::SendStatus(CurrentClan,"Next Checkpoint",3000,CUIConfig::EUISound::Silence);
				}
			}
			else{
				Log("""[ChaseTeams] Team{{{CurrentClan-1}}} Current cp was Not crossed by all team""");
			}
			_SetTeamCpCrossCount(CurrentClan, Team.CpCrossCount + 1);
		}
		if(RaceWaypoint < Team.CurrentCp){
			Log(""""[ChaseTeams] Team{{{CurrentClan-1}}} Crossed a previous cp""");
		}
	}
	if(NeedUpdateNet){
		ToNet();
	}
}

Void Yield(){

	if(!GameState::Is(GameStates::C_Playing) || G_WinState >= 0) return;

	if(!IsComplete(1)){
		G_WinState = C_WinByForfeit;
		G_WinClan = 2;
		Log(""""[ChaseTeams] Team 1 is Not complete, Team 2 Wins by forfeit""");
	}
	if(!IsComplete(2)){
		G_WinState = C_WinByForfeit;
		G_WinClan = 1;
		Log(""""[ChaseTeams] Team 2 is Not complete, Team 1 Wins by forfeit""");

	}
}

Void SetTeamsNamesAndColors(Text _Team1Name, Text _Team1Color, Text _Team2Name, Text _Team2Color){

	if(_Team1Name == ""){
		Teams[0].Name = "Team Azure";
	}else{
		Teams[0].Name = _Team1Name;
	}
	if(_Team2Name == ""){
		Teams[1].Name = "Team Orange";
	}else{
		Teams[1].Name = _Team2Name;
	}
	if(_Team1Color == ""){
		Teams[0].ColorUI = Colors::C_Team0;
	}else{
		Teams[0].ColorUI = CL::HexToRgb(_Team1Color);
	}
	if(_Team2Color == ""){
		Teams[1].ColorUI = Colors::C_Team1;
	}else{
		Teams[1].ColorUI = CL::HexToRgb(_Team2Color);
	}
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	G_ChaseTeams.add(K_ChaseTeams{});
	G_ChaseTeams.add(K_ChaseTeams{});
	SetTeamsNamesAndColors("","","","");
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Messages::Load();
	Events::Load();
	GameState::Load();
	Commands::Load();
}