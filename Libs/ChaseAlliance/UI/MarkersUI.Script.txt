//#RequireContext CSmMlScriptIngame
#Include "ChaseAlliance/Libs/Common/Log.Script.txt"
#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink
#Include "ChaseAlliance/Libs/Common/Layers.Script.txt" as Layers
#Include "ChaseAlliance/Libs/Common/UI/Components/Common.Script.txt" as Common
#Include "ChaseAlliance/Libs/Common/UI/Consts/Align.Script.txt" as Align
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/ChaseTeams.Script.txt" as ChaseTeams
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/PlayerMarkers.Script.txt" as PlayerMarkers

#Const C "MarkersUI"

Text _Model(){
	declare Text Instances;
	for(I,0,20){
		Instances ^= """
<frameinstance modelid="{{{PlayerMarkers::C}}}" id="player-{{{I}}}"/>
""";
	}
	return """
<framemodel id="{{{C}}}">
	{{{Instances}}}
</framemodel>
""";
}

Text _Functions(){
	return """//!
declare K_{{{PlayerMarkers::C}}}[Text] G_{{{C}}}PlayerMarkers;

Void {{{C}}}_UpdatePlayerMarkersVisibility(){
	declare Text[] RelayerLogins = [G_{{{ChaseTeams::C}}}[0].RelayerLogin,G_{{{ChaseTeams::C}}}[1].RelayerLogin];
	foreach (Marker in UI.Markers) {
		if(Marker.Type != CUIConfigMarker::EAnchorType::Player) continue;
		if(G_{{{C}}}PlayerMarkers.existskey(Marker.ManialinkFrameId)){
			{{{PlayerMarkers::C}}}_UpdateVisibility(G_{{{C}}}PlayerMarkers[Marker.ManialinkFrameId],Marker,RelayerLogins);
		}
	}
}
""";
}

Text _Labels(){
	return """//!
***Init***
***
for(I,0,20){
	G_{{{C}}}PlayerMarkers["player-"^I] = {{{PlayerMarkers::C}}}_Get(Page.MainFrame,"player-"^I);
}
declare K_{{{ChaseTeams::C}}} Team;
declare CSmPlayer Relayer;
***

***GUIPlayer_Change***
***
if({{{ChaseTeams::C}}}_CheckPlayer(GUIPlayer)){
	Team = G_{{{ChaseTeams::C}}}[GUIPlayer.CurrentClan - 1];
	Relayer <=> GetPlayer(Team.RelayerLogin);
}else{
	Relayer = Null;
}
{{{C}}}_UpdatePlayerMarkersVisibility();
***

***{{{ChaseTeams::C}}}_Change***
***
if({{{ChaseTeams::C}}}_CheckPlayer(GUIPlayer)){
	Team = G_{{{ChaseTeams::C}}}[GUIPlayer.CurrentClan - 1];
	Relayer <=> GetPlayer(Team.RelayerLogin);
}else{
	Relayer = Null;
}
{{{C}}}_UpdatePlayerMarkersVisibility();
***

***Yield***
***
if(Relayer != Null){
	foreach (Marker in UI.Markers) {
		if(Marker.Type != CUIConfigMarker::EAnchorType::Player) continue;
		if(Marker.ImageUrl != Relayer.User.Login) continue;
		if(G_{{{C}}}PlayerMarkers.existskey(Marker.ManialinkFrameId)){
			{{{PlayerMarkers::C}}}_Update(G_{{{C}}}PlayerMarkers[Marker.ManialinkFrameId],Relayer);
		}
	}
}
***
""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	Layers::Destroy(C);
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	Common::Load();
	ChaseTeams::Load();
	PlayerMarkers::Load();
	Manialink::CreateComponent(C,[PlayerMarkers::C,ChaseTeams::C,"GetPlayer","GUIPlayerObserver"],_Model(),"",_Functions(),_Labels());
	Layers::Load();
	Layers::Create(C,Manialink::CreateManialink(C));
	Layers::SetType(C,CUILayer::EUILayerType::Markers);
	Layers::AttachAll(C);
}