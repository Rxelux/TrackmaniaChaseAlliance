//#RequireContext CSmMlScriptIngame
#Include "ChaseAlliance/Libs/Common/Layers.Script.txt" as Layers
#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink
#Include "ChaseAlliance/Libs/Common/UI/Components/Common.Script.txt" as Common
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/Button.Script.txt" as Button
#Include "ChaseAlliance/Libs/ChaseAlliance/Players.Script.txt" as PlayersL

#Const C "QuitMenu"

Text _Model(){
	return """
<framemodel id="{{{C}}}">
	<frameinstance modelid="{{{Button::C}}}" id="spectate" data-size="50 10" data-pos="6.6 18" data-text="{{{_("Spectate")}}}"/>
	<frameinstance modelid="{{{Button::C}}}" id="switch" data-size="50 10" data-pos="2.2 6" data-text="{{{_("Change team")}}}"/>
	<frameinstance modelid="{{{Button::C}}}" id="quit"  data-size="50 10" data-pos="-2.2 -6" data-text="{{{_("Quit")}}}"/>
	<frameinstance modelid="{{{Button::C}}}" id="close" data-size="50 10" data-pos="-6.6 -18" data-text="{{{ _("Close")}}}"/>
</framemodel>
""";
}

Text _Functions(){
	return """//!
Void {{{C}}}_HandleButtonHover(K_{{{Button::C}}} _Button,CMlScriptEvent::Type _Type){
	if(_Type == CMlScriptEvent::Type::MouseOver){
		{{{Button::C}}}_In(_Button);
	}
	if(_Type == CMlScriptEvent::Type::MouseOut){
		{{{Button::C}}}_Out(_Button);
	}
}
""";
}

Text _Labels(){
	return """//!
***Init***
***
	declare K_{{{Button::C}}} SpectateButton = {{{Button::C}}}_Get(Page.MainFrame,"spectate");
	declare K_{{{Button::C}}} SwitchButton = {{{Button::C}}}_Get(Page.MainFrame,"switch");
	declare K_{{{Button::C}}} QuitButton = {{{Button::C}}}_Get(Page.MainFrame,"quit");
	declare K_{{{Button::C}}} CloseButton = {{{Button::C}}}_Get(Page.MainFrame,"close");
	declare K_{{{Button::C}}}[] Buttons = [SpectateButton,SwitchButton,QuitButton,CloseButton];
	declare Integer RequestRespawnTimer;
	declare Integer RequestSpectatorTimer;
	declare Boolean OpenPage;
	declare Boolean PageWasVisible;
	declare Boolean ClosePage;
	declare Integer ClosePageTimer;
***

***Yield***
***
if(RequestRespawnTimer != 0 && RequestRespawnTimer < Now){
	RequestRespawnTimer = 0;
	SendCustomEvent("{{{PlayersL::C_NeedRespawn}}}", []);
}
if(RequestSpectatorTimer != 0 && RequestSpectatorTimer < Now){
	RequestSpectatorTimer = 0;
	SendCustomEvent("{{{PlayersL::C_ForceSpectator}}}", []);
}
if(ClosePageTimer != 0 && ClosePageTimer < Now){
	ClosePageTimer = 0;
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}
if(IsSpectator){
	SpectateButton.Label.Value = _("Resume");
}else{
	SpectateButton.Label.Value = _("Spectate");
}
if(OpenPage){
	OpenPage = False;
	foreach (I => Button in Buttons) {
		{{{Button::C}}}_Enter(Button,Now+I*20);
	}
}
if(ClosePage){
	ClosePage = False;
	if(ClosePageTimer == 0){
		foreach (I => Button in Buttons) {
			{{{Button::C}}}_Exit(Button,Now+I*20);
		}
		ClosePageTimer = Now+500;
	}
}
***

***End***
***
if(!PageIsVisible && PageWasVisible){
	PageWasVisible = False;
}
if(PageIsVisible && !PageWasVisible){
	OpenPage = True;
	PageWasVisible = True;
}
***

***Event***
***
if(Event.Type == CMlScriptEvent::Type::KeyPress) {
	if(PageWasVisible && Event.KeyName == "Escape" && ClosePageTimer == 0){
		ClosePage = True;
	}
}
***

***{{{Button::C}}}_Event***
***

switch(ControlId){
	case "spectate": {
		{{{C}}}_HandleButtonHover(SpectateButton,Event.Type);
		if(Event.Type == CMlScriptEvent::Type::MouseClick){
			if(IsSpectator){
				SendCustomEvent("{{{PlayersL::C_ForcePlayer}}}", []);
				RequestRespawnTimer = Now+500;
			}else{
				RequestSpectatorTimer = Now+500;
			}
			ClosePage = True;
		}
	}
	case "switch": {
		{{{C}}}_HandleButtonHover(SwitchButton,Event.Type);
		if(Event.Type == CMlScriptEvent::Type::MouseClick){
			SendCustomEvent("{{{PlayersL::C_ForcePlayer}}}", []);
			if(InputPlayer == Null)continue;
			RequestRespawnTimer = Now+500;
			if(InputPlayer.CurrentClan == 1){
				JoinTeam2();
			}else{
				JoinTeam1();
			}
			ClosePage = True;
		}
	}
	case "quit": {
		{{{C}}}_HandleButtonHover(QuitButton,Event.Type);
		if(Event.Type == CMlScriptEvent::Type::MouseClick){
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
		}
	}
	case "close": {
		{{{C}}}_HandleButtonHover(CloseButton,Event.Type);
		if(Event.Type == CMlScriptEvent::Type::MouseClick){
			ClosePage = True;
		}
	}
}
***
""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	Layers::Destroy(C);
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	PlayersL::Load();
	Button::Load();
	Common::Load();
	Manialink::CreateComponent(C,[Button::C],_Model(),"",_Functions(),_Labels());
	Layers::Load();
	Layers::Create(C,Manialink::CreateManialink(C));
	Layers::SetType(C,CUILayer::EUILayerType::InGameMenu);
	Layers::AttachAll(C);
}