//#RequireContext CSmMlScriptIngame
#Include "ChaseAlliance/Libs/Common/Layers.Script.txt" as Layers
#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink

#Include "ChaseAlliance/Libs/Common/UI/Components/Radar.Script.txt" as Radar
#Include "ChaseAlliance/Libs/Common/UI/Components/Common.Script.txt" as Common
#Include "ChaseAlliance/Libs/Common/UI/Components/LapCounter.Script.txt" as LapCounter
#Include "ChaseAlliance/Libs/Common/UI/Components/RaceTimer.Script.txt" as RaceTimer
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/ChaseTeams.Script.txt" as ChaseTeams
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/RelayStatus.Script.txt" as RelayStatus
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors

#Const C "MainUI"

Text _Model(){
	declare Text RadarFrontColor = Colors::ToDataText(Colors::C_Success);
	declare Text RadarBackColor = Colors::ToDataText(Colors::C_Error);
	declare Text RadarFillColor = Colors::ToDataText(Colors::C_AllianceDark);
	return """
<framemodel id="{{{C}}}" class="{{{C}}}">
	<frameinstance modelid="{{{Radar::C}}}" id="radar" pos="0 -50" 
		data-fill-color="{{{RadarFillColor}}}" data-front-color="{{{RadarFrontColor}}}" data-back-color="{{{RadarBackColor}}}"/>
	<frameinstance modelid="{{{LapCounter::C}}}" id="lap-counter" pos="135 82"/>
	<frameinstance modelid="{{{RaceTimer::C}}}" id="race-timer" pos="0 -82"/>
	<frameinstance modelid="{{{RelayStatus::C}}}" id="relay-status" pos="0 -68"/>
</framemodel>
""";
}

Text _Labels(){
	return """//!
***Init***
***
	HideResumePlayingButton = True;
	declare K_{{{Radar::C}}} Radar = {{{Radar::C}}}_Get(Page.MainFrame,"radar");
	Radar.Root.Visible = False;
	declare K_{{{LapCounter::C}}} LapCounter = {{{LapCounter::C}}}_Get(Page.MainFrame,"lap-counter");
	declare K_{{{RaceTimer::C}}} RaceTimer = {{{RaceTimer::C}}}_Get(Page.MainFrame,"race-timer");
	declare K_{{{RelayStatus::C}}} RelayStatus = {{{RelayStatus::C}}}_Get(Page.MainFrame,"relay-status");
	declare K_{{{ChaseTeams::C}}} Team;
	declare CSmPlayer Relayer;
***

***GUIPlayer_Change***
***
Team = {{{ChaseTeams::C}}}_GetTeam(GUIPlayer);
Relayer <=> GetPlayer(Team.RelayerLogin);
***

***{{{ChaseTeams::C}}}_Change***
***
Team = {{{ChaseTeams::C}}}_GetTeam(GUIPlayer);
Relayer <=> GetPlayer(Team.RelayerLogin);
***

***Yield***
***
	{{{Radar::C}}}_Update(Radar,GUIPlayer,Relayer);
	{{{RelayStatus::C}}}_Update(RelayStatus,GUIPlayer,Relayer,Team.RelayStarted,Team.LastSuccessfulRelayCp,Team.CurrentCp);
	{{{LapCounter::C}}}_Update(LapCounter,GUIPlayer,G_{{{Settings::C}}}.LapCount);
	{{{RaceTimer::C}}}_Update(RaceTimer,GUIPlayer);
***

""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	Layers::Destroy(C);
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	Radar::Load();
	LapCounter::Load();
	RaceTimer::Load();
	ChaseTeams::Load();
	Settings::Load();
	RelayStatus::Load();
	Manialink::CreateComponent(C,
		[RelayStatus::C,Radar::C,LapCounter::C,RaceTimer::C,ChaseTeams::C,Settings::C,"GetPlayer","GUIPlayerObserver"],
		_Model(),"","",_Labels());
	Layers::Load();
	Layers::Create(C,Manialink::CreateManialink(C));
	Layers::SetType(C,CUILayer::EUILayerType::Normal);
	Layers::AttachAll(C);
}