//#RequireContext CSmMlScriptIngame
#Include "ChaseAlliance/Libs/Common/Layers.Script.txt" as Layers
#Include "ChaseAlliance/Libs/ChaseAlliance/ChaseTeams.Script.txt" as ChaseTeams


#Const C_LayerName "MainUI"

Text ML(){
	return
"""<manialink version="3" name="{{{C_LayerName}}}">
	<frame id="radar" pos="0 -50">
		<quad z-index="0" size="20 20" halign="center" valign="center" image="file://Media/Painter/Stencils/01-EllipseRound/Brush.tga" modulatecolor="000000FF" opacity="0.8" />
		<quad id="radar-circle-border" z-index="0" size="20 20" halign="center" valign="center" image="file://Media/Painter/Stencils/11-Ellipses/_EllipseRoundc/Brush.tga" />
		<frame id="radar-circle-gauge" rot="180" scale="1.22" halign="center" valign="center">
			<frame size="10 20" pos="5 0" halign="center" valign="center">
				<quad id="gauge-left" pos="-5 0"  z-index="0" size="10 20" colorize="FFF" image="file://Media/Manialinks/Nadeo/Trackmania/Ingame/NewSpeed-gauge1.dds" valign="center" halign="right" hidden="0" />
			</frame>
			<frame size="10 20" pos="-5 0" halign="center" valign="center">
				<quad id="gauge-right" pos="5 0" z-index="0" size="10 20" colorize="FFF" image="file://Media/Manialinks/Nadeo/Trackmania/Ingame/NewSpeed-gauge1.dds" valign="center" halign="right" rot="180" hidden="0"/>
			</frame>
    	</frame>
		<label id="distance" size="17 5" text="myLabel" halign="center" valign="center2" textfont="RajdhaniMono" textsize="4" />
		<frame id="arrow">
			<!-- <quad id="arrow-img" pos="0 10" z-index="0" size="10 10"  valign="bottom" halign="center" image="file://Media/Manialinks/Nadeo/TrackMania/Ingame/Arrow2.dds" colorize="FFF" /> -->
			<quad id="arrow-img" pos="0 10" z-index="0" size="10 6"  valign="bottom" halign="center" image="file://Media/Painter/Stencils/05-Triangle0/Brush.tga" modulatecolor="000000FF" />
			<!-- <quad id="arrow-img" rot="-90" pos="4 15" z-index="0" size="7 7"  valign="bottom" halign="center" image="file://Media/Painter/Stencils/23-Arrow1/Brush.tga" modulatecolor="000000FF" /> -->
		</frame>
	</frame>
	<label id="status-message" pos="0 -70" size="50 5" text="myLabel" halign="center" valign="center" textsize="4" style="TextRaceMessageBig" />
	<!-- <label id="debug" pos="0 20" size="500 5" text="myLabel" halign="center" valign="center2" textfont="RajdhaniMono" textsize="4" /> -->
	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL

	#Struct K_CircularGauge {
		CMlFrame Frame;
		CMlQuad Left;
		CMlQuad Right;
	}
	
	
	{{{ChaseTeams::C_K_ChaseTeams}}}

	// declare Ident RelayerId;
	
	Boolean RelayerExists(Ident _RelayerId){
		return Players.existskey(_RelayerId);
	}
	
	declare K_ChaseTeams[] ChaseTeams;	
	Ident GetRelayerId(CSmPlayer _Owner){
		if(_Owner != Null){
			declare Integer Clan = _Owner.CurrentClan;
			if(ChaseTeams.count != 2){
				return NullId;
			}
			declare K_ChaseTeams Team = ChaseTeams[Clan-1];
			if(Team.RelayerLogin == ""){
				return NullId;
			}
			foreach (Player in Players) {
				if(Player.User.Login == Team.RelayerLogin){
					return Player.Id;
				}
			}
		}
		return NullId;
	}

	Integer GetCurrentCp(CSmPlayer _Owner){
		declare Integer Clan = _Owner.CurrentClan;
		if(ChaseTeams.count != 2){
			return -1;
		}
		declare K_ChaseTeams Team = ChaseTeams[Clan-1];
		return Team.CurrentCp;
	}

	Integer GetRelayPoints(CSmPlayer _Owner){
		declare Integer Clan = _Owner.CurrentClan;
		if(ChaseTeams.count != 2){
			return -1;
		}
		declare K_ChaseTeams Team = ChaseTeams[Clan-1];
		return Team.RelayPoints;
	}
	Integer GetCpCrossCount(CSmPlayer _Owner){
		declare Integer Clan = _Owner.CurrentClan;
		if(ChaseTeams.count != 2){
			return -1;
		}
		declare K_ChaseTeams Team = ChaseTeams[Clan-1];
		return Team.CpCrossCount;
	}
	


	CSmPlayer GetOwner() {
		if (GUIPlayer != Null) return GUIPlayer;
		return InputPlayer;
	}

	Void RenderGauge(K_CircularGauge Gauge, Real Value) {
		if (Value <= 0.01) {
			Gauge.Right.Hide();
			Gauge.Left.Hide();
			return;
		} else if (Value <= 0.5) {
			Gauge.Right.Show();
			Gauge.Left.Hide();
			Gauge.Right.RelativeRotation = -180. + Value * 360;
			Gauge.Left.RelativeRotation = 0.;
		} else {
			Gauge.Right.Show();
			Gauge.Left.Show();
			Gauge.Right.RelativeRotation = 0.;
			Gauge.Left.RelativeRotation = 180. + Value * 360;
		}
	}

	main(){
		HideResumePlayingButton = True;
		declare CMlFrame Arrow <=> (Page.GetFirstChild("arrow") as CMlFrame);
		declare CMlQuad ArrowImg <=> (Page.GetFirstChild("arrow-img") as CMlQuad);
		declare CMlQuad CircleBorder <=> (Page.GetFirstChild("radar-circle-border") as CMlQuad);
		declare CMlFrame FlagGaugeFrame <=> (Page.GetFirstChild("radar-circle-gauge") as CMlFrame);
		declare CMlQuad FlagGaugeLeft <=> (FlagGaugeFrame.GetFirstChild("gauge-left") as CMlQuad);
		declare CMlQuad FlagGaugeRight <=> (FlagGaugeFrame.GetFirstChild("gauge-right") as CMlQuad);
		declare K_CircularGauge FlagGauge = K_CircularGauge{ Frame = FlagGaugeFrame, Left = FlagGaugeLeft, Right = FlagGaugeRight };
		declare CMlLabel StatusMessage <=> (Page.GetFirstChild("status-message") as CMlLabel);
		declare CMlFrame Radar <=> (Page.GetFirstChild("radar") as CMlFrame);
		declare CMlLabel Distance <=> (Page.GetFirstChild("distance") as CMlLabel);
		// declare CMlLabel Debug <=> (Page.GetFirstChild("debug") as CMlLabel);
		Radar.Visible = False;

		declare netread Integer Net_ChaseTeamsChange for Teams[0];
		declare netread K_ChaseTeams[] Net_ChaseTeams for Teams[0];

		declare Integer PrevChaseTeamsChange;
		// declare CSmPlayer PrevPlayer;
		declare Integer OwnerPreviousCpCrossCount;
		declare Integer CpFailCompt = -1;
		declare Ident PreviousRelayer = NullId;
		
		while(True){
			yield;
			declare CSmPlayer Owner <=> GetOwner();
			if(PrevChaseTeamsChange != Net_ChaseTeamsChange){
				PrevChaseTeamsChange = Net_ChaseTeamsChange;
				ChaseTeams = Net_ChaseTeams;
			}
			if(Owner != Null){
				// if(PrevPlayer != Owner){
					// 	PrevPlayer <=> Owner;
					// 	SetRelayerId(Owner);
					// }
				declare Ident RelayerId = GetRelayerId(Owner);
				
				StatusMessage.Value = "$2E0Go Go Go!!!"; // Message at start
				// StatusMessage.Value = "$2E0Go!"; // Message at start
				// StatusMessage.Value = ""; // Message at start

				declare Integer TeamCpCrossCount = GetCpCrossCount(Owner);
				declare Integer TeamRelayPoints = GetRelayPoints(Owner);
				declare Integer TeamCurrentCp = GetCurrentCp(Owner);
				declare Integer OwnerCpCrossCount = Owner.RaceWaypointTimes.count;


				// Debug.Value = "$E02Debug : $FFF"^RelayerId^" "^OwnerCpCrossCount^" "^TeamCpCrossCount^" "^TeamRelayPoints^" "^TeamCurrentCp^" "^CpFailCompt^" "^PreviousRelayer;
				
				if (OwnerPreviousCpCrossCount != OwnerCpCrossCount && OwnerCpCrossCount > TeamCurrentCp){
					CpFailCompt += 1;
				}
				if (CpFailCompt == 0 && !RelayerExists(RelayerId) && OwnerCpCrossCount >= TeamCurrentCp || OwnerCpCrossCount > TeamCurrentCp && CpFailCompt == 0){
					StatusMessage.Value = "Wait for players";
					CpFailCompt = 0;
				}
				else if (CpFailCompt >= 1 && !RelayerExists(RelayerId) && OwnerCpCrossCount >= TeamCurrentCp || OwnerCpCrossCount > TeamCurrentCp && CpFailCompt >= 1 ){
					StatusMessage.Value = "$E02Wait for players";
					// StatusMessage.TextSizeReal = 5.;
				}
				
				if (RelayerExists(RelayerId))
					PreviousRelayer = RelayerId;

				if(RelayerExists(RelayerId) && Owner != Null && Owner.Id != RelayerId){
					Radar.Visible = True;
					declare CSmPlayer Relayer <=> Players[RelayerId];
					StatusMessage.Value = "$E02Wait for $FFF"^Relayer.User.Name;
					
					if(Relayer.IsEntityStateAvailable){
						
						declare Vec3 OwnerPos = Owner.Position;
						declare Vec3 RelayerPos = Relayer.Position;
						declare Vec3 OwnerForward = ML::CrossProduct(Owner.LeftDirection, Owner.UpDirection);
						declare Vec3 OwnerRelayerRelativePos = RelayerPos-OwnerPos;
						declare Real OwnerRelayerDistance = ML::Distance(OwnerPos, RelayerPos);
						declare Real OwnerInFront = ML::DotProduct(OwnerForward, OwnerRelayerRelativePos);

						Distance.Value = TL::FormatReal(OwnerRelayerDistance,0,False,True)^"m";
						// Distance.Value = TL::FormatInteger(OwnerRelayerDistance,1)^"m";
						RenderGauge(FlagGauge, ML::Clamp(OwnerRelayerDistance/100., 0., 1.));
						
			
						// Distance.TextColor = <ML::Clamp(OwnerRelayerDistance/100., 0., 1.),ML::Clamp((100-OwnerRelayerDistance)/100., 0., 1.) ,0.>;
						// ArrowImg.ModulateColor = <ML::Clamp(OwnerRelayerDistance/100., 0., 1.),ML::Clamp((100-OwnerRelayerDistance)/100., 0., 1.) ,0.>;
						
						if (OwnerInFront >= 0 ){
							FlagGaugeLeft.Colorize = <0., 1., 0.>;
							FlagGaugeRight.Colorize = <0., 1., 0.>;
							CircleBorder.ModulateColor = <0., 1., 0.>;
							ArrowImg.ModulateColor = <0., 1., 0.>;
						}else{
							FlagGaugeLeft.Colorize = <1., 0., 0.>;
							FlagGaugeRight.Colorize = <1., 0., 0.>;
							CircleBorder.ModulateColor = <1., 0., 0.>;
							ArrowImg.ModulateColor = <1., 0., 0.>;
						}
										
						Arrow.Visible = True;
						Arrow.RelativeRotation = ML::RadToDeg(ML::OrientedAngle(OwnerRelayerRelativePos,OwnerForward));
					}else{
						Distance.Value = "Too Far";
						Arrow.Visible = False;
					}
				}else {
					Radar.Visible = False;
					// If this is used, this adds a small delay before wait players message after hcrossing  cp as a Relayer
					/*
					if(OwnerCpCrossCount < TeamCurrentCp && CpFailCompt != -1 || RelayerExists(RelayerId))
					{
						StatusMessage.Value = "$2E0Go Go Go!!!";
						if (OwnerCpCrossCount < TeamCurrentCp)
							CpFailCompt = -1;
						else
							CpFailCompt = 0;
					}
					*/
				}
				OwnerPreviousCpCrossCount = OwnerCpCrossCount;
			}else{
				Radar.Visible = False;
			}
		}
	}
	--></script>
</manialink>""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	Layers::Destroy(C_LayerName);
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Layers::Load();
	Layers::Create(C_LayerName,ML());
	Layers::SetType(C_LayerName,CUILayer::EUILayerType::Normal);
	Layers::AttachAll(C_LayerName);
}