//#RequireContext CSmMlScriptIngame
#Include "ChaseAlliance/Libs/Common/Layers.Script.txt" as Layers
#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink
#Include "ChaseAlliance/Libs/ChaseAlliance/Ranked.Script.txt" as Ranked

#Include "ChaseAlliance/Libs/Common/UI/Components/Radar.Script.txt" as Radar
#Include "ChaseAlliance/Libs/Common/UI/Components/Common.Script.txt" as Common
#Include "ChaseAlliance/Libs/Common/UI/Components/LapCounter.Script.txt" as LapCounter
#Include "ChaseAlliance/Libs/Common/UI/Components/RaceTimer.Script.txt" as RaceTimer
#Include "ChaseAlliance/Libs/Common/UI/Components/EndTimer.Script.txt" as EndTimer
#Include "ChaseAlliance/Libs/Common/UI/Components/EndTime.Script.txt" as EndTimeL
#Include "ChaseAlliance/Libs/Common/UI/Components/GameState.Script.txt" as GameState
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/ChaseTeams.Script.txt" as ChaseTeams
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/RelayStatus.Script.txt" as RelayStatus
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/Settings.Script.txt" as Settings
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/SmallScoresTable.Script.txt" as SmallScoresTable
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/CpTimes.Script.txt" as CpTimes
#Include "ChaseAlliance/Libs/ChaseAlliance/UI/Components/Ranked.Script.txt" as RankedUI
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors

#Const C "MainUI"

Text _Model(){
	declare Text RadarFrontColor = Colors::ToDataText(Colors::C_Success);
	declare Text RadarBackColor = Colors::ToDataText(Colors::C_Failure);
	declare Text RadarFillColor = Colors::ToDataText(Colors::C_Dark);
	return """
<framemodel id="{{{C}}}" class="{{{C}}}">
	<frameinstance modelid="{{{SmallScoresTable::C}}}" id="scores" pos="0 86"/>
	<frameinstance modelid="{{{Radar::C}}}" id="radar" pos="0 -50" 
		data-fill-color="{{{RadarFillColor}}}" data-front-color="{{{RadarFrontColor}}}" data-back-color="{{{RadarBackColor}}}"/>
	<frameinstance modelid="{{{LapCounter::C}}}" id="lap-counter" pos="156 86"/>
	<frameinstance modelid="{{{RaceTimer::C}}}" id="race-timer" pos="0 -86"/>
	<frameinstance modelid="{{{EndTimer::C}}}" id="end-timer" pos="156 0" data-end-color="{{{RadarBackColor}}}"/>
	<frameinstance modelid="{{{RelayStatus::C}}}" id="relay-status" pos="0 -68"/>
	<frameinstance modelid="{{{CpTimes::C}}}" id="cp-times" pos="80 -82"/>
	<frameinstance modelid="{{{RankedUI::C}}}" id="ranked" pos="138 50"/>
</framemodel>
""";
}

Text _Labels(){
	return """//!
***Init***
***
	HideResumePlayingButton = True;
	declare Boolean IsRankedPlayer = False;
	declare Boolean IsReadyRanked = False;
	declare K_{{{Radar::C}}} Radar = {{{Radar::C}}}_Get(Page.MainFrame,"radar");
	declare K_{{{LapCounter::C}}} LapCounter = {{{LapCounter::C}}}_Get(Page.MainFrame,"lap-counter");
	declare K_{{{RaceTimer::C}}} RaceTimer = {{{RaceTimer::C}}}_Get(Page.MainFrame,"race-timer");
	declare K_{{{EndTimer::C}}} EndTimer = {{{EndTimer::C}}}_Get(Page.MainFrame,"end-timer");
	declare K_{{{RelayStatus::C}}} RelayStatus = {{{RelayStatus::C}}}_Get(Page.MainFrame,"relay-status");
	declare K_{{{SmallScoresTable::C}}} SmallScoresTable = {{{SmallScoresTable::C}}}_Get(Page.MainFrame,"scores");
	declare K_{{{CpTimes::C}}} CpTimes = {{{CpTimes::C}}}_Get(Page.MainFrame,"cp-times");
	declare K_{{{RankedUI::C}}} RankedUI = {{{RankedUI::C}}}_Get(Page.MainFrame,"ranked");

	declare K_{{{ChaseTeams::C}}} Team;
	declare Integer NowAtEndTimerChange = -1;
***

***{{{EndTimeL::C}}}_Change***
***
NowAtEndTimerChange = Now;
***

***{{{GameState::C}}}_Change***
***
switch(G_{{{GameState::C}}}){
	case C_{{{GameState::C}}}_Playing :{
		RaceTimer.RaceTimer.TextColor = {{{Colors::C_Playing}}};
		LapCounter.Lap.TextColor = {{{Colors::C_Playing}}};
		LapCounter.Prefix.TextColor = {{{Colors::C_Playing}}};
		EndTimer.EndTimer.TextColor = {{{Colors::C_Playing}}};
		Radar.Root.Show();
		LapCounter.Root.Show();
		RaceTimer.Root.Show();
		EndTimer.Root.Hide();
		RelayStatus.Root.Show();
		SmallScoresTable.Root.Show();
		CpTimes.Root.Show();
		RankedUI.Root.Show();
	}
	case C_{{{GameState::C}}}_Waiting :{
		RaceTimer.RaceTimer.TextColor = {{{Colors::C_Waiting}}};
		LapCounter.Lap.TextColor = {{{Colors::C_Waiting}}};
		LapCounter.Prefix.TextColor = {{{Colors::C_Waiting}}};
		EndTimer.EndTimer.TextColor = {{{Colors::C_Waiting}}};
		RelayStatus.Root.Hide();
		Radar.Root.Hide();
		LapCounter.Root.Show();
		RaceTimer.Root.Show();
		EndTimer.Root.Show();
		SmallScoresTable.Root.Show();
		CpTimes.Root.Show();
		RankedUI.Root.Show();
	}
	case C_{{{GameState::C}}}_WarmUp :{
		RaceTimer.RaceTimer.TextColor = {{{Colors::C_WarmUp}}};
		LapCounter.Lap.TextColor = {{{Colors::C_WarmUp}}};
		LapCounter.Prefix.TextColor = {{{Colors::C_WarmUp}}};
		EndTimer.EndTimer.TextColor = {{{Colors::C_WarmUp}}};
		RelayStatus.Root.Hide();
		Radar.Root.Hide();
		LapCounter.Root.Show();
		RaceTimer.Root.Show();
		EndTimer.Root.Show();
		SmallScoresTable.Root.Show();
		CpTimes.Root.Show();
		RankedUI.Root.Show();
	}
	case C_{{{GameState::C}}}_Pause :{
		RaceTimer.RaceTimer.TextColor = {{{Colors::C_Pause}}};
		LapCounter.Lap.TextColor = {{{Colors::C_Pause}}};
		LapCounter.Prefix.TextColor = {{{Colors::C_Pause}}};
		RelayStatus.Root.Hide();
		Radar.Root.Hide();
		LapCounter.Root.Show();
		RaceTimer.Root.Show();
		EndTimer.Root.Show();
		SmallScoresTable.Root.Show();
		CpTimes.Root.Show();
		RankedUI.Root.Show();
	}
	case C_{{{GameState::C}}}_EndRound :{
		RelayStatus.Root.Hide();
		Radar.Root.Hide();
		LapCounter.Root.Hide();
		RaceTimer.Root.Hide();
		EndTimer.EndTimer.TextColor = {{{Colors::C_Playing}}};
		EndTimer.Root.Show();
		SmallScoresTable.Root.Show();
		CpTimes.Root.Hide();
		RankedUI.Root.Show();
	}
	default: {
		RelayStatus.Root.Hide();
		Radar.Root.Hide();
		LapCounter.Root.Hide();
		RaceTimer.Root.Hide();
		EndTimer.Root.Hide();
		SmallScoresTable.Root.Hide();
		CpTimes.Root.Hide();
		RankedUI.Root.Hide();
	}
}
if (G_{{{Settings::C}}}.RankedMode == 1){
	RankedUI.Root.Hide();
}
***

***GUIPlayer_Change***
***
if({{{ChaseTeams::C}}}_CheckPlayer(GUIPlayer)){
	Team = G_{{{ChaseTeams::C}}}[GUIPlayer.CurrentClan - 1];
}
***

***{{{ChaseTeams::C}}}_Change***
***
if({{{ChaseTeams::C}}}_CheckPlayer(GUIPlayer)){
	Team = G_{{{ChaseTeams::C}}}[GUIPlayer.CurrentClan - 1];
}
{{{SmallScoresTable::C}}}_Update(SmallScoresTable);
***

***{{{RankedUI::C}}}_JoinOrLeaveRankedClick***
***
	if(!IsSpectator){
		SendCustomEvent("{{{Ranked::C_JoinOrLeaveRankedGame}}}", []);
	}
	if(IsRankedPlayer){
		RankedUI.JoinOrLeaveRanked.Label.Value = _("Leave Ranked");
		RankedUI.ReadyRanked.Root.Show();
	}else{
		RankedUI.JoinOrLeaveRanked.Label.Value = _("Join Ranked");
		RankedUI.ReadyRanked.Root.Hide();
	}
***

***{{{RankedUI::C}}}_ReadyRankedClick***
***
	if(!IsSpectator){
		SendCustomEvent("{{{Ranked::C_ReadyRankedGame}}}", []);
	}

	if (IsReadyRanked){
		RankedUI.ReadyRanked.Label.Value = _("Ready");
	}else{
		RankedUI.ReadyRanked.Label.Value = _("Not Ready");
	}
***

***{{{RankedUI::C}}}_AddBotsRankedClick***
***
	SendCustomEvent("{{{Ranked::C_AddBotsRankedGame}}}", []);
***

***Yield***
***
	declare CSmPlayer Relayer <=> GetPlayer(Team.RelayerLogin);
	{{{Radar::C}}}_Update(Radar,Relayer);
	{{{RelayStatus::C}}}_Update(RelayStatus,Relayer,Team.RelayStarted,Team.LastSuccessfulRelayCp,Team.CurrentCp);
	{{{LapCounter::C}}}_Update(LapCounter,G_{{{Settings::C}}}.LapCount);
	{{{RaceTimer::C}}}_Update(RaceTimer);
	{{{CpTimes::C}}}_Update(CpTimes);
	{{{EndTimer::C}}}_Update(EndTimer,G_{{{EndTimeL::C}}} - (Now - NowAtEndTimerChange));
***

""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
	Layers::Destroy(C);
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	Radar::Load();
	LapCounter::Load();
	RaceTimer::Load();
	ChaseTeams::Load();
	Settings::Load();
	GameState::Load();
	RelayStatus::Load();
	EndTimeL::Load();
	EndTimer::Load();
	CpTimes::Load();
	RankedUI::Load();
	SmallScoresTable::Load();
	Manialink::CreateComponent(C,
		[	
			RankedUI::C,
			CpTimes::C,
			EndTimeL::C,
			EndTimer::C,
			GameState::C,
			SmallScoresTable::C,
			RelayStatus::C,
			Radar::C,
			LapCounter::C,
			RaceTimer::C,
			ChaseTeams::C,
			Settings::C,
			"GetPlayer",
			"GUIPlayerObserver"
		],
		_Model(),"","",_Labels());
	Layers::Load();
	Layers::Create(C,Manialink::CreateManialink(C));
	Layers::SetType(C,CUILayer::EUILayerType::Normal);
	Layers::AttachAll(C);
}