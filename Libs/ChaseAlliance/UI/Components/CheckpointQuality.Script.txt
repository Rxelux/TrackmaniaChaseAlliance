#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink
#Include "ChaseAlliance/Libs/Common/UI/Consts/Align.Script.txt" as Align
#Include "MathLib" as ML

#Const C "CheckpointQuality"


Text _Model (){
	return """
<framemodel id="{{{C}}}" {{{Align::CC}}}>
    <label id="checkpoint-quality-label" textfont="RajdhaniMono" textsize="12" {{{Align::LC}}}/>
</framemodel>""";
}

Text _Directives(){
	return """//!
#Struct K_{{{C}}}{
    CMlFrame Root;
	CMlLabel CheckpointQualityLabel;
}
""";
}


Text _Functions(){
	return """//!
K_{{{C}}} {{{C}}}_Get(CMlFrame _Parent,Text _Id) {
	declare CMlFrame Root <=> (_Parent.GetFirstChild(_Id) as CMlFrame);
	declare CMlLabel CheckpointQualityLabel <=> (Root.GetFirstChild("checkpoint-quality-label") as CMlLabel);
	return K_{{{C}}}{
		Root = Root,
		CheckpointQualityLabel = CheckpointQualityLabel
	};
}
Integer CalculateRelayQuality(Integer _PlayerCpTime, Integer _RelayerCpTime, Real _PlayerCpSeeed, Real _RelayerCpSpeed){
	declare Integer TimeDelta = (_PlayerCpTime - _RelayerCpTime)/1000;
	return TimeDelta;
	// Integer RelativeSpeedDelta = _PlayerCpSeeed - _RelayerCpTime;
	// return ML:Max(0, ML:Min(10000, 10000*ML:Exp(-2*TimeDelta));
}

Real {{{C}}}_Update(K_{{{C}}} _CheckpointQualityLabel,CSmPlayer _Player, CSmPlayer _Relayer, CSmPlayer _PrevRelayer, Integer _CurrentCp, Integer _LastSuccessRelayCpTime, Boolean _PrevRelayWasSuccess, Real _LastSuccessCpSpeed){
	declare Real _LastSuccessCpSpeedrReturn = _LastSuccessCpSpeed;
	if (_LastSuccessCpSpeed == 0 && _Relayer != Null &&  _Relayer.RaceWaypointTimes.count > _CurrentCp){
		_LastSuccessCpSpeedrReturn = _Relayer.Speed;
	}
	
	
	if(_Player != Null && _Relayer != Null && _PrevRelayWasSuccess ){
		
		if (_Player.RaceWaypointTimes.count >= 1 && _PrevRelayer.RaceWaypointTimes.count >= 1)
			_CheckpointQualityLabel.CheckpointQualityLabel.Value = ""^_Player.RaceWaypointTimes[_Player.RaceWaypointTimes.count - 1]^" "^_LastSuccessRelayCpTime;
	// 		// _CheckpointQualityLabel.CheckpointQualityLabel.Value = ""^CalculateRelayQuality(_Player.RaceWaypointTimes[_Player.RaceWaypointTimes.count - 1], _CurrentCpTime, 0., 0.);
	// 		// _CheckpointQualityLabel.CheckpointQualityLabel.Value = ""^CalculateRelayQuality(_Player.RaceWaypointTimes[_Player.RaceWaypointTimes.count - 1], _LastSuccessRelayCpTime, 0., 0.);
	}
	
	if (_LastSuccessCpSpeed != 0 && _Relayer != Null && _Relayer.RaceWaypointTimes.count == _CurrentCp){
		_LastSuccessCpSpeedrReturn = _Relayer.Speed;
	}

	return _LastSuccessCpSpeedrReturn;
}
""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	Manialink::CreateComponent(C,[],_Model(),_Directives(),"",_Functions(),"");
}
