#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink
#Include "ChaseAlliance/Libs/Common/UI/Consts/Align.Script.txt" as Align
#Include "MathLib" as ML
#Include "TimeLib" as TIL


#Const C "CheckpointQuality"


Text _Model (){
	return """
<framemodel id="{{{C}}}" {{{Align::CC}}} hidden="1">
	<quad size="30 6" bluramount="500" bgcolor="333333" opacity="0.6" {{{Align::CC}}} />
    <label size="30 6" id="checkpoint-quality-label" textfont="RajdhaniMono" textsize="2.5" {{{Align::CC}}}/>
</framemodel>""";
}

Text _Directives(){
	return """//!
#Struct K_{{{C}}}{
    CMlFrame Root;
	CMlLabel CheckpointQualityLabel;
}
""";
}


Text _Labels(){
	return """//!
***Init***
***
declare Real LastSuccessCpSpeed = 0.; 
declare Integer LastSuccessRelayCpTime = 0; 
declare CpCrossCount = 0;
declare Integer QualityMessageStartTime = TIL::GetMillisecondsSinceInit (); 
***
""";
}

Text _Functions(){
	return """//!
K_{{{C}}} {{{C}}}_Get(CMlFrame _Parent,Text _Id) {
	declare CMlFrame Root <=> (_Parent.GetFirstChild(_Id) as CMlFrame);
	declare CMlLabel CheckpointQualityLabel <=> (Root.GetFirstChild("checkpoint-quality-label") as CMlLabel);
	return K_{{{C}}}{
		Root = Root,
		CheckpointQualityLabel = CheckpointQualityLabel
	};
}

Real CalculateRelayQuality(Integer _PlayerCpTime, Integer _RelayerCpTime, Real _PlayerCpSeeed, Real _RelayerCpSpeed){
	declare Real TimeDelta = (ML::ToReal(_PlayerCpTime) - ML::ToReal(_RelayerCpTime))/1000;
	declare Real RelativeSpeedDelta = ML::Clamp((_PlayerCpSeeed - _RelayerCpSpeed)/_RelayerCpSpeed, -2., 2.);
	if (TimeDelta < 0.)
		return 0.;
	declare Real RelayQuality = ML::Max(1., 1. + ML::Min(1000., 1000*ML::Exp(-20*TimeDelta)*(0.85 + RelativeSpeedDelta)));
	return RelayQuality;
}

Text RelayQualityToString(Real _RelayQuality){
	declare Integer maxPoint = 1000;
	if (_RelayQuality < ML::NearestInteger(0.15*maxPoint))
		return "$888Good";
	if (_RelayQuality < ML::NearestInteger(0.8*maxPoint))
		return "$dd5Nice";
	if (_RelayQuality < ML::NearestInteger(1.0*maxPoint))
		return "$fe0$sExcelent";
	return "$91eLegendary";
}

Integer GetCpCrossCount(CSmPlayer _Player, Integer _TeamPlayerCount){
	if (_Player == Null)
		return 0;
	declare Integer MaxCpCrossCount = 0;
	declare Integer CpCrossCount = 1;

	foreach (Player in Players) {
		if (Player.CurrentClan == _Player.CurrentClan){
			declare Integer playerCpCrossCount = Player.RaceWaypointTimes.count;
		if(playerCpCrossCount > MaxCpCrossCount){
			MaxCpCrossCount = playerCpCrossCount;
			CpCrossCount = 1;
		}
		else if (playerCpCrossCount == MaxCpCrossCount){
			CpCrossCount += 1 ;
		}
		}
	}
	// if (CpCrossCount == _TeamPlayerCount)
	// 	return 0;
	return CpCrossCount;
}


Integer GetCurrentCp(CSmPlayer _Player){
	if (_Player == Null)
		return 0;
	declare Integer CurrentCp = 0;

	foreach (Player in Players) {
		if (Player.CurrentClan == _Player.CurrentClan){
			declare Integer playerCpCrossCount = Player.RaceWaypointTimes.count;
			if(playerCpCrossCount > CurrentCp){
				CurrentCp = playerCpCrossCount;
			}
		}
	}
	return CurrentCp;
}

Boolean WasFistAtCp(CSmPlayer _Owner){
	if (_Owner == Null)
		return False;

	declare Integer OwnerCpCrossCount = _Owner.RaceWaypointTimes.count;
	if (OwnerCpCrossCount < 1)
		return False;
	
	foreach (Player in Players) {
		if (Player.CurrentClan == _Owner.CurrentClan){
			declare Integer PlayerCpCrossCount = Player.RaceWaypointTimes.count;
			if (PlayerCpCrossCount > 0){
				if (PlayerCpCrossCount > OwnerCpCrossCount){
					return False;
				}
				if (PlayerCpCrossCount == OwnerCpCrossCount && Player.RaceWaypointTimes[PlayerCpCrossCount - 1] <  _Owner.RaceWaypointTimes[OwnerCpCrossCount - 1]){
					return False;
				}
			}
		}
	}
	return True;
}

Real {{{C}}}_Update(K_{{{C}}} _CheckpointQualityLabel,CSmPlayer _Player, CSmPlayer _Relayer, CSmPlayer _PrevRelayer, Integer _CurrentCp, Integer _LastSuccessRelayCpTime, Boolean _PrevRelayWasSuccess, Real _LastSuccessCpSpeed, Integer _QualityMessageStartTime, Integer _CpCrossCount, Integer _TeamPlayerCount){
	// _CheckpointQualityLabel.Root.Visible = False;
	declare Integer ElapsedTimeSinceLastQualityMessage = TIL::GetMillisecondsSinceInit () - _QualityMessageStartTime;
	
	
	declare Real LastSuccessCpSpeedReturn = _LastSuccessCpSpeed;
	if (_Relayer != Null && _Relayer.RaceWaypointTimes.count > _CurrentCp && _CpCrossCount == _TeamPlayerCount){
		LastSuccessCpSpeedReturn = _Relayer.Speed;
	}

	declare Integer CurrentCp = GetCurrentCp(_Player);
	if(_Player != Null && _Player != _Relayer) {// && _PrevRelayWasSuccess ){
		declare Boolean WasFistAtCp = WasFistAtCp(_Player);
		if (!WasFistAtCp && _CpCrossCount >= 2 && CurrentCp != 1 && _Player.RaceWaypointTimes.count > 1){
				// if 	(ElapsedTimeSinceLastQualityMessage > 0 && ElapsedTimeSinceLastQualityMessage < 2950){
					_CheckpointQualityLabel.Root.Visible = True;
					if (_CheckpointQualityLabel.CheckpointQualityLabel.Value == ""){
						declare Real RelayQuality = CalculateRelayQuality(_Player.RaceWaypointTimes[_Player.RaceWaypointTimes.count - 1], _LastSuccessRelayCpTime, _Player.Speed, LastSuccessCpSpeedReturn);
						declare Text RelayQualityText = RelayQualityToString(RelayQuality);
						_CheckpointQualityLabel.CheckpointQualityLabel.Value = "$s"^ML::NearestInteger(RelayQuality)^" PTS | "^RelayQualityText;
					}
				// }
		}
	}
	if (ElapsedTimeSinceLastQualityMessage > 3340){
		_CheckpointQualityLabel.Root.Visible = False;
		_CheckpointQualityLabel.CheckpointQualityLabel.Value = "";
	}

	return LastSuccessCpSpeedReturn;
}


Integer {{{C}}}_GetLastSuccessRelayCpTime(CSmPlayer _Relayer, Integer _CurrentCp, Integer _LastSuccessRelayCpTime){

	declare Integer LastSuccessRelayCpTimeReturn = _LastSuccessRelayCpTime;
	if (_Relayer != Null && _Relayer.RaceWaypointTimes.count > _CurrentCp){
		LastSuccessRelayCpTimeReturn = _Relayer.RaceWaypointTimes[_Relayer.RaceWaypointTimes.count - 1];
	}
	return LastSuccessRelayCpTimeReturn;
}


Integer {{{C}}}_GetMessageTimout(CSmPlayer _Player, Integer _CpCrossCount, Integer _QualityMessageStartTime){
	
	declare Integer _QualityMessageStartTimeReturn = _QualityMessageStartTime;
	// declare CpCrossCount = GetCpCrossCount();
	if(_Player != Null && _CpCrossCount == 1){
		_QualityMessageStartTimeReturn = TIL::GetMillisecondsSinceInit ();
	}
	return _QualityMessageStartTimeReturn;	
}
""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	Manialink::CreateComponent(C,[],_Model(),_Directives(),_Functions(),_Labels());
}
