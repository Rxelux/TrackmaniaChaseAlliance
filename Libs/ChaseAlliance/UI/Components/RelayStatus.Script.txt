//#RequireContext CSmMlScriptIngame
#Include "ChaseAlliance/Libs/Common/UI/Manialink.Script.txt" as Manialink
#Include "ChaseAlliance/Libs/Common/UI/Consts/Align.Script.txt" as Align
#Include "ChaseAlliance/Libs/ChaseAlliance/Consts/Colors.Script.txt" as Colors
#Include "TextLib" as TL

#Const C "RelayStatus"

Text _Model (){
	return """
<framemodel id="{{{C}}}" class="{{{C}}}" {{{Align::CC}}}>
	<frame id="frame" hidden="1">
		<label id="relay-status" size="50 5" {{{Align::CC}}} textsize="4" textfont="RajdhaniMono" textemboss="1" />
	</frame>
</framemodel>
""";
}

Text _Directives(){
	return """//!
#Struct K_{{{C}}}{
	CMlFrame Root;
	CMlFrame Frame;
	CMlLabel RelayStatus;
}
""";
}

Text _Functions(){
	return """//!

K_{{{C}}} {{{C}}}_Get(CMlFrame _Parent,Text _Id) {
	declare CMlFrame Root <=> (_Parent.GetFirstChild(_Id) as CMlFrame);
	declare CMlFrame Frame <=> (Root.GetFirstChild("frame") as CMlFrame);
	declare CMlLabel RelayStatus <=> (Root.GetFirstChild("relay-status") as CMlLabel);
	return K_{{{C}}}{
		Root = Root,
		Frame = Frame,
		RelayStatus = RelayStatus
	};
}

Void {{{C}}}_Update(K_{{{C}}} _RelayStatus,CSmPlayer _Relayer,Boolean _RelayStarted,Integer _LastSuccessfulRelayCp,Integer _CurrentCp){
	if(GUIPlayer == Null){
		_RelayStatus.Frame.Visible = False;
		return;
	}
	_RelayStatus.Frame.Visible = True;

	if(!_RelayStarted){
		_RelayStatus.RelayStatus.Value = "${{{TL::ColorToText(Colors::C_Success)}}}Go!";
	}else{
		if(_Relayer == Null){
			if(GUIPlayer.RaceWaypointTimes.count < _CurrentCp){
				_RelayStatus.RelayStatus.Value = "${{{TL::ColorToText(Colors::C_Success)}}}Go!";
			}else{
				if(_LastSuccessfulRelayCp == _CurrentCp || _CurrentCp == 1){
					_RelayStatus.RelayStatus.Value = "Wait for players.";
				}else{
					_RelayStatus.RelayStatus.Value = "${{{TL::ColorToText(Colors::C_Failure)}}}Wait for players.";
				}
			}
		}else{
			if(GUIPlayer == _Relayer){
				_RelayStatus.RelayStatus.Value = "${{{TL::ColorToText(Colors::C_Success)}}}Go Go Go!!!";
			}else{
				if(_LastSuccessfulRelayCp == _CurrentCp){
					_RelayStatus.RelayStatus.Value = "Wait for "^_Relayer.User.Name^".";
				}else{
					_RelayStatus.RelayStatus.Value = "${{{TL::ColorToText(Colors::C_Failure)}}}Wait for "^_Relayer.User.Name^".";
				}
			}
		}
	}
}
""";
}

declare Boolean G_Loaded;
Void Unload() {
	G_Loaded = False;
}

Void Load() {
	if(G_Loaded)return;
	Unload();
	G_Loaded = True;
	Manialink::Load();
	Manialink::CreateComponent(C,[],_Model(),_Directives(),_Functions(),"");
}
